<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Angular依赖包，图片找不到的原因分析及解决方案</title>
    <url>/2023/07/12/Angular%E4%BE%9D%E8%B5%96%E5%8C%85%EF%BC%8C%E5%9B%BE%E7%89%87%E6%89%BE%E4%B8%8D%E5%88%B0%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h3 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h3><p>在Angular开发的依赖包中，若某个组件使用了图片，当集成该依赖包并使用该组件时，会出现图片丢失的问题。</p>
<h3 id="2、问题原因"><a href="#2、问题原因" class="headerlink" title="2、问题原因"></a>2、问题原因</h3><p>图片以相对路径形式写到了样式文件中，如<code>background: url(&quot;../../../assets/dobogo/localCpts/name-value/1.png&quot;) center center no-repeat;</code>，打依赖包并集成之后，该组件所处路径已发生变化，意味着该样式所处路径也已经发生变化，此时再以相对路径查找，则直接404</p>
<h3 id="3、解决方案"><a href="#3、解决方案" class="headerlink" title="3、解决方案"></a>3、解决方案</h3><h4 id="3-1、方案一"><a href="#3-1、方案一" class="headerlink" title="3.1、方案一"></a>3.1、方案一</h4><ul>
<li>思路：以行内样式写到html中或js中；</li>
<li>问题：编码不规范；</li>
</ul>
<h4 id="3-2、方案二"><a href="#3-2、方案二" class="headerlink" title="3.2、方案二"></a>3.2、方案二</h4><ul>
<li>思路：采用和Tui框架处理图片相同的方案，即将图片以base64形式打包到代码中；</li>
<li>问题：使用的图片较少可以，如果较多，则不太合适，图片转base64之后字符太长；</li>
</ul>
<h4 id="3-3、方案三"><a href="#3-3、方案三" class="headerlink" title="3.3、方案三"></a>3.3、方案三</h4><ul>
<li>思路：less变量定义相对路径，打依赖包之前替换变量值为.&#x2F;（直接从当前服务路径下查找assets目录），打依赖包之后还原变量值（尽量减少手动维护成本）；</li>
<li>具体方案：</li>
</ul>
<ol>
<li>新建变量存储文件variable.less；</li>
<li>定义变量，如<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@firstPath</span>: <span class="string">&#x27;../&#x27;</span>;</span><br><span class="line"><span class="keyword">@secondPath</span>: <span class="string">&#x27;../../&#x27;</span>;</span><br><span class="line"><span class="keyword">@thirdPath</span>: <span class="string">&#x27;../../../&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li>引用变量，如<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;@&#123;thirdPath&#125;assets/dobogo/localCpts/name-value/1.png&quot;</span>) center center no-repeat;</span><br></pre></td></tr></table></figure></li>
<li>配置打包文件，放到项目根目录即可；</li>
<li>修改打包命令为：<br><code>&quot;packagr&quot;: &quot;node variable.imgpath.js step1 &amp;&amp; ng-packagr -p ng-package.json &amp;&amp; node variable.imgpath.js step3&quot;</code></li>
<li>打包文件variable.imgpath.js如下：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> args = process.<span class="property">argv</span>.<span class="title function_">splice</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vPath = <span class="string">&#x27;./src/style/variable.less&#x27;</span>; <span class="comment">// 根据实际情况调整 </span></span><br><span class="line"><span class="keyword">var</span> bakPath = <span class="string">&#x27;./src/style/variable.bak.less&#x27;</span>; <span class="comment">// 根据实际情况调整 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (args == <span class="string">&#x27;step1&#x27;</span>) &#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(vPath, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, files</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(err); <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">    fs.<span class="title function_">writeFile</span>(bakPath, files, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(err); <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;less中的图片路径变量备份成功&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> result = files.<span class="title function_">replace</span>(<span class="regexp">/(..\/)+/g</span>, <span class="string">&#x27;./&#x27;</span>);</span><br><span class="line">      fs.<span class="title function_">writeFile</span>(vPath, result, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(err); <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;less中的图片路径变量替换成功&#x27;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (args == <span class="string">&#x27;step3&#x27;</span>) &#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(bakPath, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, files</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(err); <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">    fs.<span class="title function_">writeFile</span>(vPath, files, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(err); <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;less中的图片路径变量还原成功&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      fs.<span class="title function_">unlink</span>(bakPath, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(err); <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;备份文件删除成功&#x27;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
  </entry>
  <entry>
    <title>CKEditor5学习开发之路</title>
    <url>/2023/01/11/CKEditor5%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<blockquote>
<p>在开发富文本编辑器的过程中，遇到了很多问题，这里做下记录与分享。</p>
</blockquote>
<blockquote>
<p>说明：本文中涉及的代码较少，也并非单纯的开发步骤，而是整理的一些思路和问题，如果你是想一步一参考的开发一个Demo，本文并不适合你。</p>
</blockquote>
<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>公司的一款产品中要加入报告功能，简单来讲，就是通过Web浏览器定义word模板、定时任务，服务端根据模板、任务定时生成周报、月报的功能。对于服务端的定时任务、生成周报月报的功能实现，本文不做阐述。本文只介绍Web端的word模板定义的实现思路及遇到的一些问题，对于该功能，除了富文本编辑器基本功能之外，还需支持插入占位符（用于服务端生成word时替换为实际内容）、图表。</p>
<h2 id="二、技术选型"><a href="#二、技术选型" class="headerlink" title="二、技术选型"></a>二、技术选型</h2><p>接到需求之后，首先想到的一些成熟的产品，像<a href="https://note.youdao.com/">有道云笔记</a>、<a href="https://docs.qq.com/">腾讯文档</a>、<a href="https://shimo.im/">石墨文档</a>、<a href="https://www.yuque.com/">语雀</a>、<a href="https://www.wolai.com/">我来</a>（没使用过，形式好像不太一样）等都有类似功能，但具体是如何实现的呢，不得而知。由于本人之前使用过有道云，所以就想查查有没有相关文章、代码可以参考，没想到还真有。</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000039046174?utm_source=sf-similar-article">有道云笔记新版编辑器架构设计（上）</a></li>
<li><a href="https://segmentfault.com/a/1190000039104198?utm_source=sf-similar-article">有道云笔记新版编辑器架构设计（下）</a></li>
</ul>
<p>这是有道技术团队分享的架构设计，具有极高的参考价值。看完这两篇文章，本人甚至都有自己开发实现一把的冲动了。奈何考虑到只有我一个人在做这个事情，而且文章虽好，但没有技术细节，实现难度较大，最终只能作罢，只好沿着富文本编辑器的思路继续调研。</p>
<p>网上关于富文本编辑器的推荐着实不少，<a href="https://blog.csdn.net/growb/article/details/124446195">推荐几款好用的富文本编辑器</a>、<a href="https://jishuin.proginn.com/p/763bfbd75b52">推荐10款常用的富文本编辑器</a>，经过综合对比，最终选定了<a href="https://ckeditor.com/">CKEditor</a>。之所以选CKEditor，一是因为它适配了Angular框架，提供了依赖包<code>@ckeditor/ckeditor5-angular</code>（公司技术栈就是Angular），二是支持从 Word、Excel 和 Google Docs 粘贴。</p>
<h2 id="三、CKEditor的使用与踩坑"><a href="#三、CKEditor的使用与踩坑" class="headerlink" title="三、CKEditor的使用与踩坑"></a>三、CKEditor的使用与踩坑</h2><p>对于CKEditor的介绍，这里就不再赘述了，官方文档介绍的更为详细，但目前还没找到中文文档。</p>
<blockquote>
<p>不过需要说明的是，能够提前阅读到上述有道技术团队分享的架构设计，也算是比较幸运的，这对于理解CKEditor的架构设计及后面的插件开发，是相当有帮助的。</p>
</blockquote>
<h3 id="1、Document-Editor"><a href="#1、Document-Editor" class="headerlink" title="1、Document Editor"></a>1、Document Editor</h3><p>CKEditor支持在5种模式下使用：Classic、Balloon、Balloon Block、Inline、Document，而Document恰恰是我们需要的。按照其<a href="https://ckeditor.com/docs/ckeditor5/latest/installation/frameworks/angular.html#using-the-document-editor-build">文档</a>介绍，很容易就能构建出一个Demo。</p>
<h3 id="2、添加Page-break插件"><a href="#2、添加Page-break插件" class="headerlink" title="2、添加Page break插件"></a>2、添加<a href="https://ckeditor.com/docs/ckeditor5/latest/features/page-break.html">Page break</a>插件</h3><p>由于Document模式默认是不带分页功能的，而<a href="https://ckeditor.com/docs/ckeditor5/latest/features/pagination/pagination.html">Pagination</a>又是收费插件，我们只能退而求其次使用Page break。而当我们按照文档尝试安装并引入该插件时，程序报错了。</p>
<p><code>core.js:7744 ERROR Error: Uncaught (in promise): CKEditorError: ckeditor-duplicated-modules</code></p>
<p>对于这个错误，官网也有详细<a href="https://ckeditor.com/docs/ckeditor5/latest/support/error-codes.html#error-ckeditor-duplicated-modules">说明</a>，大概意思就是不能在已经构建的包<code>@ckeditor/ckeditor5-build-decoupled-document</code>中再导入新的插件。</p>
<p>如果只是使用CKEditor提供的现有插件，则可以使用<a href="https://ckeditor.com/docs/ckeditor5/latest/installation/getting-started/quick-start-other.html#creating-custom-builds-with-online-builder">Online Builder</a>来解决上述问题。但正如前文提到的，我们的需求还包括支持插入占位符、图表，因此我们还需继续研究CKEditor如何扩展一个新的插件。</p>
<h3 id="3、从源代码构建编辑器"><a href="#3、从源代码构建编辑器" class="headerlink" title="3、从源代码构建编辑器"></a>3、<a href="https://ckeditor.com/docs/ckeditor5/latest/installation/getting-started/quick-start-other.html#building-the-editor-from-source">从源代码构建编辑器</a></h3><p>正如上文提到，当我们想要扩展一个新插件时，就不能使用CKEditor提供的已经构建好的包了<code>[CKEditor提供了5种已构建好的包，对应上述提到的5种使用模式]</code>，而是需要基于源码进行开发构建。可以按照其<a href="https://ckeditor.com/docs/ckeditor5/latest/installation/getting-started/quick-start-other.html#building-the-editor-from-source">文档</a>一步步搭建开发环境、开发、构建，而另一种相对比较简单的方式则是直接下载<a href="https://github.com/ckeditor/ckeditor5">源码</a>，进入packages&#x2F;ckeditor5-build-decoupled-document目录，直接安装依赖、开发、构建。</p>
<p>其实我一开始的想法是，在一个Angular工程中安装<code>@ckeditor/ckeditor5-angular</code>，然后开发新插件，最后将这个Angular工程打包成一个依赖包提供给产线各部门使用（我们部门的职责之一就是为各部门提供开发套件）。但是在打包代码时程序报错了，具体什么错误记不清了，由于时间关系没有继续研究。<br><em>TODO: 后面有时间了还得再回来看看。</em></p>
<h2 id="四、插件开发"><a href="#四、插件开发" class="headerlink" title="四、插件开发"></a>四、插件开发</h2><p>好了，准备工作已完成，下面可以进入代码开发阶段了。关于插件开发的入门，可参考<a href="https://ckeditor.com/docs/ckeditor5/latest/framework/guides/plugins/creating-simple-plugin-timestamp.html">这里</a>。</p>
<h3 id="1、图片上传"><a href="#1、图片上传" class="headerlink" title="1、图片上传"></a>1、图片上传</h3><p>我们要开发的第一个插件是图片上传插件，确切的说是扩展一个自定义的图片上传适配器。CKEditor默认提供了图片插入功能，但图片并没有提交至服务端，这部分逻辑需要自行实现，按照<a href="https://ckeditor.com/docs/ckeditor5/latest/framework/guides/deep-dive/upload-adapter.html">文档</a>一步步开发即可，没有什么需要特别注意的。</p>
<h3 id="2、占位符"><a href="#2、占位符" class="headerlink" title="2、占位符"></a>2、占位符</h3><p>占位符插件也比较简单，直接基于文档中的一个<a href="https://ckeditor.com/docs/ckeditor5/latest/framework/guides/plugins/simple-plugin/abbreviation-plugin-level-1.html">实例</a>改造即可。</p>
<h3 id="3、插入图表"><a href="#3、插入图表" class="headerlink" title="3、插入图表"></a>3、插入图表</h3><p>前两个插件的开发，基本上只要是理解了CKEditor的架构设计，并且按照文档的步骤，一般是不会有太多问题的。但是对于插入图表的功能，完全找不到参考，无奈，只能一边梳理思路一边研究官方文档了。</p>
<ul>
<li><p>思考一<br>对于图表，我们测试使用的是ECharts。我们知道如果想要实例化一个图表，也即调用它的初始化方法<code>echarts.init(dom?: HTMLDivElement|HTMLCanvasElement)</code>，需要一个Dom元素作为参数，那么我们需要研究的就是在插件中如何能够获取到新创建的Dom了。<br>通过文档中的 <a href="https://ckeditor.com/docs/ckeditor5/latest/framework/guides/tutorials/using-react-in-a-widget.html">Using a React component in a block widget</a> 这个教程，我们发现其在渲染 React component 时，就是获取到插件中新创建的Dom进而渲染组件的。<br>那么这个问题便迎刃而解了。</p>
<blockquote>
<p>通过这个问题，需要再次告诫自己，对于这种比较成熟的产品、开发套件、开源库等，一手文档一定是其官方文档，哪怕是英文的，也要仔细研读，不要图省事去网上搜罗别人的博客、技术分享。<br>刚开始的时候，我是各种搜、各种查，但始终没有找到如何获取新创建的Dom的方案，最后还是通过官方文档找到了答案。</p>
</blockquote>
</li>
<li><p>思考二<br>图表插入之后，如何确定当前选中的是图表元素，进而进行后续的业务操作？<br>相关 API 主要涉及 setCustomProperty、getCustomProperty、getSelectedElement、isWidget，具体含义及用法还是查阅<a href="https://ckeditor.com/docs/ckeditor5/latest/api/index.html">官方文档</a>吧。</p>
</li>
<li><p>思考三<br>图表插入之后，如何调整图表尺寸？<br>开始以为这个问题应该很好解决，因为图片在插入之后，是能够直接拖拽调整大小的，我们只需参考图片插件扩展一个图表 resize 插件即可。但当我们查看图片插件源码时，发现代码量较大，没学习到的 API 也较多，遂暂时放弃了拖拽调整图表大小的想法。<br>那能否通过设定固定尺寸调整图表大小呢？答案是肯定的。这里主要是参考了 <a href="https://github.com/eMAGTechLabs/ckeditor5-classic-image-resize">@emagtechlabs&#x2F;ckeditor5-classic-image-resize</a> 的代码实现。</p>
</li>
<li><p>思考四<br>实例化多个图表之后，如何区分？<br>这里主要是在定义图表插件的 schema 时带入一个 Id 即可，将来不论是图表的数据填充还是保存模板到服务端，都将通过 Id 来标识唯一的图表实例。</p>
</li>
</ul>
<h2 id="五、源码及Demo"><a href="#五、源码及Demo" class="headerlink" title="五、源码及Demo"></a>五、源码及Demo</h2><p><a href="https://github.com/DoAutumn/CKEditor5">https://github.com/DoAutumn/CKEditor5</a><br><a href="https://doautumn.github.io/CKEditor5/">https://doautumn.github.io/CKEditor5/</a></p>
]]></content>
      <categories>
        <category>富文本编辑器</category>
      </categories>
      <tags>
        <tag>CKEditor5</tag>
        <tag>富文本编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 等宽字体</title>
    <url>/2024/09/12/CSS_%E7%AD%89%E5%AE%BD%E5%AD%97%E4%BD%93/</url>
    <content><![CDATA[<p>在本文中，我们将介绍CSS中的字体族属性<code>font-family: monospace</code>。我们将探讨何时使用等宽字体，以及如何在CSS中实现等宽字体的效果。</p>
<h2 id="理解等宽字体"><a href="#理解等宽字体" class="headerlink" title="理解等宽字体"></a>理解等宽字体</h2><p>等宽字体是指每个字符宽度相同的字体。在等宽字体中，每个字符占据相同的空间，无论是宽字符（如W）还是窄字符（如I）。这种特性使得等宽字体在某些情况下非常有用。</p>
<p>等宽字体常用于编程环境和文字效果展示中，因为字符对齐非常重要。在编写代码时，等宽字体可以确保代码对齐整齐，提高可读性。此外，在展示年份、页码、数字动画时，等宽字体也可以使数字对齐，提高视觉效果。<br><img width="700" alt="年份对齐.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/CSS_等宽字体/年份对齐.png"><br><img alt="页码对齐.gif" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/CSS_等宽字体/页码对齐.gif"></p>
<h2 id="在CSS中使用等宽字体"><a href="#在CSS中使用等宽字体" class="headerlink" title="在CSS中使用等宽字体"></a>在CSS中使用等宽字体</h2><p>要在CSS中使用等宽字体，我们可以使用字体族属性<code>font-family</code>。其中，<code>monospace</code>是指浏览器中默认的等宽字体。通过设置<code>font-family: monospace</code>，我们可以将元素的字体设置为等宽字体。</p>
<p>但是，CSS中的<code>font-family: monospace</code>其实是引用了一个字体族，而不是具体指定某种字体。不同浏览器和操作系统都可能有不同的默认等宽字体。因此，在实际开发中，我们需要明确指定等宽字体的具体名称。</p>
<h2 id="自定义等宽字体"><a href="#自定义等宽字体" class="headerlink" title="自定义等宽字体"></a>自定义等宽字体</h2><p>在CSS中，我们可以使用更具体的等宽字体名称来替代默认的<code>monospace</code>字体。以下是一些常见的等宽字体：</p>
<ul>
<li>Monaco</li>
<li>Courier New</li>
<li>Consolas</li>
<li>Menlo</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Monaco, Courier New, Consolas, Menlo, monospace;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码示例中，我们已将等宽字体设定为Monaco。如果Monaco字体不可用，则依次使用Courier New、Consolas和Menlo字体。最后，如果以上字体都不可用，浏览器将使用默认的等宽字体。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>网上还有说使用<code>font-feature-settings: &quot;tnum&quot;</code><a href="https://yeelz.com/post/554.html">这里</a> 或 <code>font-variant-numeric: tabular-nums;</code><a href="https://blog.csdn.net/aexwx/article/details/126015451">这里</a>来设置的，但测试并未生效。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CentOS安装NodeJS详细教程</title>
    <url>/2024/10/13/CentOS%E5%AE%89%E8%A3%85NodeJS%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><ul>
<li>官网下载链接：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></li>
<li>用wget命令下载<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v16.13.0/node-v16.13.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-解压缩"><a href="#2-解压缩" class="headerlink" title="2. 解压缩"></a>2. 解压缩</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf node-v16.13.0-linux-x64.tar.xz</span><br><span class="line">mv node-v16.13.0-linux-x64 nodejs</span><br></pre></td></tr></table></figure>

<h3 id="3-创建软链接"><a href="#3-创建软链接" class="headerlink" title="3. 创建软链接"></a>3. 创建软链接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /opt/nodejs/bin/npm /usr/local/bin/</span><br><span class="line">ln -s /opt/nodejs/bin/node /usr/local/bin/</span><br></pre></td></tr></table></figure>

<h3 id="4-验证"><a href="#4-验证" class="headerlink" title="4. 验证"></a>4. 验证</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h3 id="5-更换npm源"><a href="#5-更换npm源" class="headerlink" title="5. 更换npm源"></a>5. 更换npm源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Gzip压缩</title>
    <url>/2022/08/10/Gzip%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<p>开启Gzip压缩功能后，服务对资源进行Gzip压缩后返回，缩小传输文件大小，提升文件传输效率，减少带宽消耗。</p>
<h4 id="Spring-Boot配置方法"><a href="#Spring-Boot配置方法" class="headerlink" title="Spring Boot配置方法"></a>Spring Boot配置方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#是否开启压缩，默认为false</span><br><span class="line">server.compression.enabled=true</span><br><span class="line">#指定要压缩的MIME type</span><br><span class="line">server.compression.mime-types=text/*,image/*,application/javascript,application/xml,application/x-font-ttf,application/font-woff</span><br></pre></td></tr></table></figure>
<h4 id="Tomcat配置方法"><a href="#Tomcat配置方法" class="headerlink" title="Tomcat配置方法"></a>Tomcat配置方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.xml</span><br><span class="line">&lt;Connector port=&quot;8080&quot;</span><br><span class="line">  protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">  connectionTimeout=&quot;20000&quot;</span><br><span class="line">  redirectPort=&quot;8443&quot;</span><br><span class="line">  compression=&quot;on&quot;</span><br><span class="line">  compressionMinSize=&quot;2048&quot;</span><br><span class="line">  noCompressionUserAgents=&quot;gozilla, traviata&quot;</span><br><span class="line">  compressableMimeType=&quot;text/*,image/*,application/javascript,application/xml,application/x-font-ttf,application/font-woff&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Gzip</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Lerna学习与使用</title>
    <url>/2023/09/05/Lerna%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>在学习<a href="/2023/09/01/wangEditor%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/">wangEditor</a>的过程中，了解到Lerna，这里记录下学习与使用过程。</p>
<p>基本概念就不再赘述了，直接参考<a href="https://lerna.js.org/">这里</a>。在学习过程中也查阅了部分博文，发现有些朋友不是很清楚这个东西是解决什么问题的，这里举例说明下。</p>
<p>在一个成熟的开发团队中，往往比较注重代码的积累、复用、共享，单就前端来说，一般会积累如下几个开发包：frame、components、charts、utils等等</p>
<ul>
<li><strong>frame</strong>：路由复用策略、路由守卫、HTTP拦截器、国际化、主题。。。</li>
<li><strong>components、charts</strong>：和开源的基础组件库、图表库不同，可能是包含一些它们没有的组件、图表，也可能是一些包含通用业务的组件、图表</li>
<li><strong>utils</strong>：uuid、deepMerge。。。</li>
</ul>
<p>这些开发包如果是独立的，也不是不可以，只是管理、使用起来比较麻烦，如果相互之前再有依赖关系的话，那就不是比较麻烦了，而是相当麻烦。那么Lerna就是为了解决这个问题的。同时它还能够根据Git提交记录，自动生成版本号、ChangeLog，省去了繁琐的配置步骤，何乐不为呢？</p>
<h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><p>参考这里的<a href="https://lerna.js.org/docs/getting-started">入门</a>，很容易初始化一个Lerna工程。<br>接下来就是创建子包了，可以直接手动创建，比如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在packages下创建文件夹sub-package</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> packages</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> sub-package</span></span><br><span class="line">       </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入文件夹初始包</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> sub-package</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn init</span></span><br></pre></td></tr></table></figure>
<p>或者采用lerna指令创建文件夹并初始化，比如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lerna create sub-package</span></span><br></pre></td></tr></table></figure>
<p>在我看来，一般我们不会从零初始化一个Lerna工程，现在3大前端框架、webpack、vite等都提供了脚手架，直接一个命令就可以初始化一个前端工程，对应的tsconfig.json、package.json、README.md、angular.json、vue.config.js等都有了，如果要是从一个空的Lerna工程手动新建这些，着实费劲。<br>所以这里就不过多介绍创建子包之后的操作了，直接进入下一环节。</p>
<h2 id="三、在Angular工程中使用Lerna-7"><a href="#三、在Angular工程中使用Lerna-7" class="headerlink" title="三、在Angular工程中使用Lerna@7"></a>三、在Angular工程中使用Lerna@7</h2><p>我们都知道，Angular是提供在一个工程中创建多个Library的功能的，只不过这些Library的发包仍然是独立的，版本号、ChangeLog也是需要手动维护的，并不友好。<br>那么在现有的Angular工程中如何使用Lerna呢？具体步骤如下：</p>
<h3 id="1、初始化Angular工程"><a href="#1、初始化Angular工程" class="headerlink" title="1、初始化Angular工程"></a>1、初始化Angular工程</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ng new my-test</span></span><br></pre></td></tr></table></figure>
<h3 id="2、新建Library"><a href="#2、新建Library" class="headerlink" title="2、新建Library"></a>2、新建Library</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> my-test</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ng g lib my-lib1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ng g lib my-lib2</span></span><br></pre></td></tr></table></figure>
<h3 id="3、初始化Lerna"><a href="#3、初始化Lerna" class="headerlink" title="3、初始化Lerna"></a>3、初始化Lerna</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lerna init --packages=<span class="string">&quot;projects/*&quot;</span>  // Angular管理子包的目录名默认为projects</span></span><br></pre></td></tr></table></figure>
<p>此时会在<code>my-test</code>目录下多出一个<code>lerna.json</code>文件。</p>
<h3 id="4、调整Library配置"><a href="#4、调整Library配置" class="headerlink" title="4、调整Library配置"></a>4、调整Library配置</h3><p>Angular默认是将Library打包到工程根目录下的<code>dist</code>目录的，这里做个调整，打包到各自的<code>dist</code>目录：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ng-package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../node_modules/ng-packagr/ng-package.schema.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span><span class="punctuation">,</span>  <span class="comment">// 这里</span></span><br><span class="line">  <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;entryFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/public-api.ts&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>在各自的<code>package.json</code>中添加如下内容（具体package.json详解请参考<a href="https://blog.csdn.net/qq_45492057/article/details/115318557">这里</a>）：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git+https://gitee.com/xxxx/my-test.git&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 如果不配置，默认就是https://www.npmjs.com/</span></span><br><span class="line">  <span class="attr">&quot;publishConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;access&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;registry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://npm:npm@ip:port/nexus/content/repositories/npm-repo/&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// Lerna默认会将package.json所在目录的所有子内容都发布出去，这里配置只发布dist目录下的内容</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;dist&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 下面的视情况而定</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/bundles/my-lib1.umd.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/fesm2015/my-lib1.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;es2015&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/fesm2015/my-lib1.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;esm2015&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/esm2015/my-lib1.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fesm2015&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/fesm2015/my-lib1.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typings&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/my-lib1.d.ts&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="5、自动生成版本号和ChangeLog"><a href="#5、自动生成版本号和ChangeLog" class="headerlink" title="5、自动生成版本号和ChangeLog"></a>5、自动生成版本号和ChangeLog</h3><p>正常开发完代码并<code>git commit</code>之后，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lerna version --conventional-commits</span></span><br></pre></td></tr></table></figure>
<p>这将会根据<a href="/2023/01/11/%E5%85%B3%E4%BA%8Ecommitlint%E5%92%8Chusky%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/#3%E3%80%81%E5%B8%B8%E7%94%A8%E7%9A%84commit-message%E7%9A%84%E7%B1%BB%E5%9E%8B">Git commit规范</a>生成版本号和ChangeLog，同时会生成Tag并一起推送到远程Git仓。</p>
<h3 id="6、发布"><a href="#6、发布" class="headerlink" title="6、发布"></a>6、发布</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lerna publish from-git --<span class="built_in">yes</span></span></span><br></pre></td></tr></table></figure>
<h3 id="7、安装依赖"><a href="#7、安装依赖" class="headerlink" title="7、安装依赖"></a>7、安装依赖</h3><p><del>如果只想给某个子包安装依赖 或者 子包之间有依赖关系，可通过如下命令实现：</del></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install &lt;dependency&gt; -w &lt;package&gt;</span></span><br><span class="line">// dependency可以是子包名称，也可以是开源依赖</span><br><span class="line">// package为目标子包名称，是子包的package.json中的name值</span><br></pre></td></tr></table></figure>
<h3 id="8、2024-08-11更新"><a href="#8、2024-08-11更新" class="headerlink" title="8、2024-08-11更新"></a>8、2024-08-11更新</h3><p>Lerna@8版本，已经不需要像步骤7那样执行命令了，正常使用<code>npm install\uninstall</code>即可，当安装的是自己的子包时，也无需添加任何额外的参数，Lerna会自动帮我们处理，并且在<code>node_modules</code>目录下，子包的目录会通过软链接的形式指向实际的代码目录，就像这样<br><img width="300" alt="软链接.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/Vue3入门/软链接.png"></p>
<p>更多细节可参考<a href="https://lerna.js.org/docs/legacy-package-management">这里</a>。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Lerna</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux无外网全局安装node依赖包</title>
    <url>/2023/03/27/Linux%E6%97%A0%E5%A4%96%E7%BD%91%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85node%E4%BE%9D%E8%B5%96%E5%8C%85/</url>
    <content><![CDATA[<ul>
<li>首先在本地全局安装需要的包<code>npm i -g http-server</code>，（注意：本地必须是全局安装），进入全局安装路径，比如我的电脑安装路径在这里：<code>/usr/local/lib/node_modules/</code>，</li>
<li>在linux上找到node安装路径，进入其<code>lib/node_modules/</code>目录下，将上述包上传至该目录下</li>
<li>建立软连接以便全局使用命令：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/src/nodejs/lib/node_modules/http-server/bin/http-server /usr/local/bin/http-server</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Mac_Chrome跨域</title>
    <url>/2023/02/05/Mac_Chrome%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<p>Mac以允许跨域方式启动Chrome，直接在终端执行以下命令即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open -n /Applications/Google\ Chrome.app/ --args --disable-web-security  --user-data-dir=/Users/doautumn/fang/chrome/MyChromeDevUserData</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/dxzg/p/9707639.html">参考链接</a></p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
  </entry>
  <entry>
    <title>Mac_ll命令</title>
    <url>/2023/02/22/Mac_ll%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>Mac默认是不支持ll命令的，为此我们需要做一些配置。</p>
<ul>
<li><p>在<code>~/.zshrc</code>文件中加入如下命令：<br><code>alias ll=&#39;ls -alF&#39;</code></p>
</li>
<li><p>执行<code>source ~/.zshrc</code>命令，使修改生效。</p>
</li>
</ul>
<p>若没有 .zshrc 文件，<code>touch .zshrc</code>新建即可。</p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
  </entry>
  <entry>
    <title>Mac_tree命令</title>
    <url>/2023/03/06/Mac_tree%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="Tree命令简介"><a href="#Tree命令简介" class="headerlink" title="Tree命令简介"></a>Tree命令简介</h2><p>Tree是一个递归目录列表命令，使用它可以生成一个深度缩进的目录列表，如下形式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── ngx-planet-master</span><br><span class="line">│   ├── docs</span><br><span class="line">│   │   ├── api</span><br><span class="line">│   │   └── guides</span><br><span class="line">│   ├── examples</span><br><span class="line">│   │   ├── app1</span><br><span class="line">│   │   ├── app2</span><br><span class="line">│   │   ├── common</span><br><span class="line">│   │   └── portal</span><br><span class="line">│   └── packages</span><br><span class="line">│       └── planet</span><br><span class="line">└── tree-2.1.0</span><br><span class="line">    └── doc</span><br></pre></td></tr></table></figure>
<p>当我们需要详细介绍每个目录的作用时，这将会很有用。</p>
<h2 id="Tree命令安装（源码安装）"><a href="#Tree命令安装（源码安装）" class="headerlink" title="Tree命令安装（源码安装）"></a>Tree命令安装（源码安装）</h2><p>1、<a href="https://gitlab.com/OldManProgrammer/unix-tree">下载安装包</a><br>2、安装步骤</p>
<ul>
<li><code>tar -zxvf tree-2.1.0.tgz</code></li>
<li>进入tree-2.1.0目录，修改tree的配置文件Makefile，将其中61行左右的注释去掉，内容参照如下：<br><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/Mac_tree%E5%91%BD%E4%BB%A4/Makefile%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9.png" alt="Makefile部分内容.png"></li>
<li>修改完之后，执行命令：<code>make</code></li>
<li>使用管理员身份安装，执行命令：<code>sudo cp tree /usr/local/bin/</code></li>
<li>测试使用tree命令：<code>tree --version</code></li>
</ul>
<hr>
<p>顺便再记录下Linux下安装步骤</p>
<p>1、yum安装</p>
<ul>
<li><code>yum install tree</code></li>
</ul>
<p>2、源码安装</p>
<ul>
<li><code>tar -zxvf tree-2.1.0.tgz</code></li>
<li><code>cd tree-2.1.0</code></li>
<li><code>make install</code></li>
<li><code>tree --version</code></li>
</ul>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
  </entry>
  <entry>
    <title>Mac_彻底删除应用程序</title>
    <url>/2023/01/11/Mac_%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>不论是通过Finder还是Launchpad卸载应用程序之后，还需要清除应用程序残留的文件，如首选项、支持文件、缓存、隐藏文件等。这些残留文件，目前通过自己使用的情况来看，即使使用CleanMyMac X也无法清除。不过我们可以通过如下方式达到目的：<br>我们只需要在如下目录找到相关目录文件，将其删除即可。</p>
<ul>
<li>应用程序支持文件：<code>~/Library/Application Support/(App Name)</code></li>
<li>首选项：<code>~/Library/Preferences/(App Name)</code></li>
<li>缓存：<code>~/Library/Caches/(App Name)</code></li>
</ul>
<p>如果某些应用在安装时，自动添加到了 <code>设置 &gt; 通用 &gt; 登录项 &gt; 允许在后台</code>，则还需执行如下步骤：</p>
<ul>
<li><code>cd /Library/LaunchDaemons/</code>，找到该应用相关的.plist文件，<code>rm -rf xxx</code>删除</li>
<li><code>cd /Library/LaunchAgents/</code>，找到该应用相关的.plist文件，<code>rm -rf xxx</code>删除</li>
</ul>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
  </entry>
  <entry>
    <title>Mac_文件添加到Docker并自定义图标</title>
    <url>/2024/05/10/Mac_%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%88%B0Docker%E5%B9%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E6%A0%87/</url>
    <content><![CDATA[<p>有些时候我们需要将文件、目录添加到Docker中实现快速访问，默认地，Mac支持将文件、目录添加到Docker的活动区，非活动区是不能添加的，那如何解决呢？<br><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/Mac_%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%88%B0Docker%E5%B9%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E6%A0%87/%E6%B4%BB%E5%8A%A8%E5%8C%BA%E3%80%81%E9%9D%9E%E6%B4%BB%E5%8A%A8%E5%8C%BA.png" alt="活动区、非活动区.png"></p>
<ul>
<li>1.将文件、目录后缀名改为<code>.app</code>即可</li>
<li>2.将文件、目录拖入Docker之后记得再改回去</li>
</ul>
<h3 id="自定义图标"><a href="#自定义图标" class="headerlink" title="自定义图标"></a>自定义图标</h3><ul>
<li>3.右键文件、目录 -&gt; 显示简介</li>
<li>4.复制一个图标之后，点击弹窗中的图标，直接粘贴即可<br><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/Mac_%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%88%B0Docker%E5%B9%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E6%A0%87/%E7%B2%98%E8%B4%B4%E5%9B%BE%E6%A0%87.png" alt="粘贴图标.png"></li>
</ul>
<h3 id="设置打开方式"><a href="#设置打开方式" class="headerlink" title="设置打开方式"></a>设置打开方式</h3><ul>
<li>5.如果是特殊格式的文件，记得选择对应的打开方式<ul>
<li>如<code>.sh</code>，选择<code>终端</code>即可点击就立即执行脚本</li>
<li>另外在脚本的最后可以添加<code>exit 0</code>命令以结束进程</li>
<li>还可以设置<code>当shell退出时</code>关闭窗口</li>
<li><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/Mac_%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%88%B0Docker%E5%B9%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E6%A0%87/%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE.png" alt="终端设置.png"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
  </entry>
  <entry>
    <title>Mac_电源控制</title>
    <url>/2023/09/14/Mac_%E7%94%B5%E6%BA%90%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<p>Mac电脑默认提供了<code>优化电池充电</code>功能，但没用明白，新电脑拿到手之后，不知道什么样的充电频次才能让它暂缓充电至80%。</p>
<p>因此需要借助三方App来实现对电池充电的控制，网上提到较多的是 AlDente 这款软件，但它是收费的。</p>
<p>这里推荐一个<a href="https://github.com/actuallymentor/battery#-command-line-version">开源软件</a>（不适用Inter芯片的Mac），可以选择安装带界面的版本或终端版本。<br>我本人用的是终端版本，带界面的版本会在菜单栏另外显示一个电池图标，我不需要。</p>
<p>终端版本的安装命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -s https://raw.githubusercontent.com/actuallymentor/battery/main/setup.sh | bash</span><br></pre></td></tr></table></figure>

<p>一般来讲是安装不成功的，那么可以直接下载源码，在源码目录路径下执行<code>./setup.sh</code>。</p>
<p>安装完之后通过在终端中运行下面的命令来开启限制充电，当电池电量达到80%时就停止充电。<br>更多相关的命令使用 –help 查看。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">battery maintain 80</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mac</category>
      </categories>
  </entry>
  <entry>
    <title>Mac_连接Win10共享的目录</title>
    <url>/2023/06/30/Mac_%E8%BF%9E%E6%8E%A5Win10%E5%85%B1%E4%BA%AB%E7%9A%84%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h3 id="废话不多说，直接上步骤"><a href="#废话不多说，直接上步骤" class="headerlink" title="废话不多说，直接上步骤"></a>废话不多说，直接上步骤</h3><p>1、鼠标右键点击此电脑-管理-本地用户和组-用户<br><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/Mac_%E8%BF%9E%E6%8E%A5Win10%E5%85%B1%E4%BA%AB%E7%9A%84%E7%9B%AE%E5%BD%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%A1%E7%90%86.png" alt="计算机管理.png"></p>
<p>2、鼠标右击用户-新用户-新建一个用户<code>（实例中用户名为：laowang，密码自己设置）</code>，特别注意：<code>用户下次登录时须更改密码</code>前的勾必须去掉<br><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/Mac_%E8%BF%9E%E6%8E%A5Win10%E5%85%B1%E4%BA%AB%E7%9A%84%E7%9B%AE%E5%BD%95/%E6%96%B0%E5%BB%BA%E7%94%A8%E6%88%B7.png" alt="新建用户.png"></p>
<p>3、找到想要共享的文件夹，右击-属性-在弹出的对话框中选择共享-点击共享-在下拉菜单中找到新建的用户，添加用户后，可以修改读写权限，然后点击下面的共享<br><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/Mac_%E8%BF%9E%E6%8E%A5Win10%E5%85%B1%E4%BA%AB%E7%9A%84%E7%9B%AE%E5%BD%95/%E8%AE%BE%E7%BD%AE%E5%85%B1%E4%BA%AB.png" alt="设置共享.png"></p>
<p>4、在Mac电脑中，commond + k<code>（连接服务器）</code>，输入<code>smb://ip/目录名称</code>即可<code>（ip为Win10电脑IP）</code><br><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/Mac_%E8%BF%9E%E6%8E%A5Win10%E5%85%B1%E4%BA%AB%E7%9A%84%E7%9B%AE%E5%BD%95/Mac%E8%BF%9E%E6%8E%A5.png" alt="Mac连接.png"></p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
  </entry>
  <entry>
    <title>Obsidian插件开发</title>
    <url>/2024/10/10/Obsidian%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之所以要开发 Obsidian 插件，是因为之前整理了<a href="/2024/09/27/%E9%80%9A%E8%BF%87Gitee%E7%9A%84OpenAPI%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A/">通过Gitee的OpenAPI实现图床</a>，想着将 Obsidian 的图片也上传到图床，然后生成链接，这样就可以在 Obsidian 中直接使用图片链接了。</p>
<p>但是后来想到，Obsidian 还是可以插入文件的，如果将文件也上传到图床固然可行，但是文件的预览就不太方便了。因为 Obsidian 中仅是插入了文件链接，点击之后实际是通过浏览器打开的，像 .docx 等文件浏览器是不支持预览的，所以就直接下载下来了，这种体验并不友好。</p>
<p>最终想了想，Obsidian 的笔记其实还是同步到 iCloud 中的，所以图片、文件也都保持这种方式吧。</p>
<p>但是插件已经开发出来了，这里就记录一下开发过程。</p>
<h2 id="开发文档"><a href="#开发文档" class="headerlink" title="开发文档"></a>开发文档</h2><p>开发文档可以参考<a href="https://luhaifeng666.github.io/obsidian-plugin-docs-zh/zh2.0/getting-started/create-your-first-plugin.html">Obsidian 插件开发文档</a>，步骤还是很详细的，示例工程都有了。</p>
<h2 id="上传文件到-Gitee"><a href="#上传文件到-Gitee" class="headerlink" title="上传文件到 Gitee"></a>上传文件到 Gitee</h2><p>我的这个插件想要实现的功能是，将粘贴或拖拽到 Obsidian 中的图片、文件自动上传到 Gitee，并生成链接，然后直接插入到笔记中。</p>
<h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><p>首先，需要配置 Gitee 的相关信息，包括用户名、仓库地址、分支名、token 等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">DEFAULT_SETTINGS</span>: <span class="title class_">MyPluginSettings</span> = &#123;</span><br><span class="line">  <span class="attr">repo</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">branch</span>: <span class="string">&#x27;master&#x27;</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="attr">token</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p>然后，需要监听 Obsidian 中的粘贴和拖拽事件，当有图片或文件被粘贴或拖拽到 Obsidian 中时，触发上传操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">onload</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">loadSettings</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">registerEvent</span>(</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">workspace</span>.<span class="title function_">on</span>(<span class="string">&#x27;editor-paste&#x27;</span>, <span class="function">(<span class="params">event, editor, content</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">uploadFiles</span>(event.<span class="property">clipboardData</span>?.<span class="property">files</span>, event, editor);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">registerEvent</span>(</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">workspace</span>.<span class="title function_">on</span>(<span class="string">&#x27;editor-drop&#x27;</span>, <span class="function">(<span class="params">event, editor, content</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">uploadFiles</span>(event.<span class="property">dataTransfer</span>?.<span class="property">files</span>, event, editor);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">uploadFiles</span>(<span class="params">files: FileList | <span class="literal">undefined</span>, event: ClipboardEvent | DragEvent, editor: Editor</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!files?.<span class="property">length</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  event.<span class="title function_">stopPropagation</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">settings</span>.<span class="property">subPathable</span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">SampleModal</span>(<span class="variable language_">this</span>.<span class="property">app</span>, files, editor, <span class="variable language_">this</span>.<span class="property">settings</span>).<span class="title function_">open</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">uploadToGitee</span>(files, <span class="variable language_">this</span>.<span class="property">settings</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      editor.<span class="title function_">replaceSelection</span>(res.<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> x).<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h3><p>上传图片的功能比较简单，直接使用 Gitee 提供的 API 即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">uploadToGitee</span>(<span class="params">fileList: FileList, settings: MyPluginSettings, filePath: string = <span class="string">&#x27;&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> tooLargeFiles = <span class="title class_">Array</span>.<span class="title function_">from</span>(fileList).<span class="title function_">filter</span>(<span class="function"><span class="params">file</span> =&gt;</span> file.<span class="property">size</span> &gt; <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span> (tooLargeFiles.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Notice</span>(<span class="string">`文件大小不能超过10MB，<span class="subst">$&#123;tooLargeFiles.map(file =&gt; file.name).join(<span class="string">&#x27;、&#x27;</span>)&#125;</span>将会被丢弃`</span>, <span class="number">5000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(fileList).<span class="title function_">filter</span>(<span class="function"><span class="params">file</span> =&gt;</span> file.<span class="property">size</span> &lt;= <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span>).<span class="title function_">map</span>(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">      reader.<span class="property">onload</span> = <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">        axios.<span class="title function_">post</span>(<span class="string">`https://gitee.com/api/v5/repos/<span class="subst">$&#123;settings.repo&#125;</span>/contents/<span class="subst">$&#123;settings.path&#125;</span>/<span class="subst">$&#123;filePath&#125;</span>/<span class="subst">$&#123;file.name&#125;</span>`</span>, &#123;</span><br><span class="line">          <span class="attr">access_token</span>: settings.<span class="property">token</span>,</span><br><span class="line">          <span class="attr">content</span>: (reader.<span class="property">result</span> <span class="keyword">as</span> string).<span class="title function_">replace</span>(<span class="string">`data:<span class="subst">$&#123;file.type&#125;</span>;base64,`</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;upload image&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(file.<span class="property">type</span>.<span class="title function_">includes</span>(<span class="string">&#x27;image&#x27;</span>) ? <span class="string">`![<span class="subst">$&#123;file.name&#125;</span>](<span class="subst">$&#123;res.data.content.download_url&#125;</span>)`</span> : res.<span class="property">data</span>.<span class="property">content</span>.<span class="property">download_url</span>)</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Notice</span>(<span class="string">`上传文件<span class="subst">$&#123;file.name&#125;</span>失败，失败原因：<span class="subst">$&#123;err.response.data.message&#125;</span>`</span>, <span class="number">5000</span>);</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;;</span><br><span class="line">      reader.<span class="property">onerror</span> = <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Notice</span>(<span class="string">`文件读取<span class="subst">$&#123;file.name&#125;</span>失败`</span>, <span class="number">5000</span>);</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;;</span><br><span class="line">      reader.<span class="title function_">readAsDataURL</span>(file);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h3><p><a href="https://github.com/DoAutumn/img-plugin-obsidian">https://github.com/DoAutumn/img-plugin-obsidian</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Obsidian</tag>
      </tags>
  </entry>
  <entry>
    <title>Puppeteer学习与使用</title>
    <url>/2023/09/08/Puppeteer%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>对Puppeteer的学习并没有深入，只是项目中用到了，这里记录下使用过程中的几个问题</p>
</blockquote>
<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>项目需求还是和富文本编辑器、报告有关，具体流程可描述为：在界面通过富文本编辑器编辑了一篇周报，周报中包含一些配置了如何获取数据的统计数值占位符、图表，将这样一串富文本提交给服务端并设置好定时任务，服务端周期性的获取最新数据替换占位符，填充到图表并渲染截图，最后生成PDF格式的报告。</p>
<p>对于服务端如何渲染图表并截图，记录下实现方案。</p>
<h2 id="二、技术方案与选型"><a href="#二、技术方案与选型" class="headerlink" title="二、技术方案与选型"></a>二、技术方案与选型</h2><p>如果图表使用ECharts的话，它本身就是支持<a href="https://echarts.apache.org/handbook/zh/how-to/cross-platform/server">服务端渲染</a>的，但很可惜，我们有些图表是自己开发的，使用Dom实现的，比如下面这样一个图表，用数据驱动*ngFor反而更简单，当然问题就是不能适配服务端渲染。<br><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/Puppeteer%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/%E6%9D%A1%E5%BD%A2%E6%8E%92%E8%A1%8C.png" alt="条形排行.png"></p>
<p>好在无头浏览器的实践方案能够解决这个问题。</p>
<p>由于另一个团队有过相关经验，他们使用的是<a href="https://phantomjs.org/">PhantomJS</a>，所以一开始也是奔着这个去调研的。后来才发现，它已经停更了，所以果断放弃，转向了<a href="https://puppeteer.bootcss.com/">Puppeteer</a>。</p>
<h2 id="三、问题记录"><a href="#三、问题记录" class="headerlink" title="三、问题记录"></a>三、问题记录</h2><h3 id="1、跳过下载浏览器"><a href="#1、跳过下载浏览器" class="headerlink" title="1、跳过下载浏览器"></a>1、跳过下载浏览器</h3><p>有两种方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i puppeteer-core</span><br><span class="line">或</span><br><span class="line">npm i puppeteer --PUPPETEER_SKIP_DOWNLOAD  // 这种方式是文档中没提到的</span><br></pre></td></tr></table></figure>

<h3 id="2、指定浏览器"><a href="#2、指定浏览器" class="headerlink" title="2、指定浏览器"></a>2、指定浏览器</h3><p>跳过下载浏览器之后，如何指定已经安装的浏览器呢？通过<code>chrome://version</code>可查询Chrome的可执行文件路径<br><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/Puppeteer%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84.png" alt="可执行文件路径.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const browser = await puppeteer.launch(&#123;executablePath: &#x27;上图中的可执行文件路径&#x27;&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="3、打开本地HTML文件"><a href="#3、打开本地HTML文件" class="headerlink" title="3、打开本地HTML文件"></a>3、打开本地HTML文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">await page.goto(&#x27;file:///Users/xxxx/Desktop/puppeteer/index.html&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="4、访问window"><a href="#4、访问window" class="headerlink" title="4、访问window"></a>4、访问window</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在puppeteer中也是可以直接访问window对象的，比如在index.html中给window设置了变量或方法，在puppeteer中是可以直接调用的</span><br><span class="line">await page.evaluate(() =&gt; &#123;</span><br><span class="line">  console.log(window.testFun());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="5、window监听事件"><a href="#5、window监听事件" class="headerlink" title="5、window监听事件"></a>5、window监听事件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 如果想使用window监听打开的页面中派发的事件，则应该这样</span><br><span class="line">await page.evaluateOnNewDocument(() =&gt; &#123;</span><br><span class="line">  window.addEventListener(&#x27;eventName&#x27;, () =&gt; &#123;</span><br><span class="line">    // your code</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Puppeteer</tag>
        <tag>无头浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3入门</title>
    <url>/2023/04/23/Vue3%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>虽然之前整理过<a href="/2023/01/11/%E4%BD%BF%E7%94%A8Vite%E6%9E%84%E5%BB%BAVue3%E7%BB%84%E4%BB%B6%E5%BA%93/">使用 Vite 构建 Vue3 组件库</a>、<a href="/2023/09/05/Lerna%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/">Lerna 学习与使用</a>，但都过于简单，对于 Vue 的基本概念、语法等知之甚少，也基本没用过 Vite，诸如以下问题均不甚了解：</p>
<ul>
<li>SFC 是什么？</li>
<li>Hooks 又是什么？</li>
<li>如何理解 Composition API？</li>
<li>如何实现组件继承？</li>
<li>如何自定义指令？</li>
<li>如何自定义结构型指令？</li>
<li>自定义的指令、组件，是如何实现完整引入和手动导入两种方式的？</li>
<li>Vue3 中的依赖注入和 Angular 中的有什么区别？</li>
<li>使用 Vite + Vue3 + TypeScript，如何在一个工程中同时构建多个依赖包？如何组织目录更合理？</li>
<li>依赖包如何自动生成 .d.ts 声明文件？</li>
<li>如何实现国际化？</li>
<li>如何动态创建组件？</li>
<li>在开发依赖包的过程中，如何更优雅的编写帮助文档？</li>
</ul>
<h2 id="一、SFC"><a href="#一、SFC" class="headerlink" title="一、SFC"></a>一、<a href="https://cn.vuejs.org/api/sfc-spec.html">SFC</a></h2><p>一个 Vue 单文件组件 (SFC)，通常使用 <code>*.vue</code> 作为文件扩展名，它是一种使用了类似 HTML 语法的自定义文件格式，用于定义 Vue 组件。一个 Vue 单文件组件在语法上是兼容 HTML 的。</p>
<p>每一个 <code>*.vue</code> 文件都由三种顶层语言块构成：<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code>，以及一些其他的自定义块：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;example&quot;</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>: <span class="string">&#x27;Hello world!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.example</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">custom1</span>&gt;</span></span><br><span class="line">  This could be e.g. documentation for the component.</span><br><span class="line"><span class="tag">&lt;/<span class="name">custom1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="二、Hooks"><a href="#二、Hooks" class="headerlink" title="二、Hooks"></a>二、Hooks</h2><p>Vue3 官方文档并没有对 Hooks 做明确定义，却无处不在在使用这个技巧，很多开源项目也在用这个技巧，这里有一些大佬的分享：</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000044673851">Vue3中的Hooks详解</a></li>
<li><a href="https://juejin.cn/post/7208111879150993464">理解Vue3中的hooks</a></li>
<li><a href="https://juejin.cn/post/7083401842733875208">Vue3必学技巧-自定义Hooks-让写Vue3更畅快</a></li>
</ul>
<p>其中，我觉得这个解释是最清晰易懂的：</p>
<ul>
<li>一般来说，我们开发中会自动抽象出逻辑函数放在utils中，utils中放的纯逻辑，不存在属于组件的东西，例如methods中定义的纯函数等。而hooks就是在utils的基础上再包一层组件级别的东西(钩子函数等)</li>
<li>hooks和utils的区别： hooks中如果涉及到ref,reactive,computed这些api的数据，那这些数据是具有响应式的，而utils只是单纯提取公共方法就不具备响应式，因此可以把hook理解为加入vue3 api的共通方法</li>
</ul>
<h2 id="三、Composition-API"><a href="#三、Composition-API" class="headerlink" title="三、Composition API"></a>三、Composition API</h2><p>组合式 API (Composition API) 是一系列 API 的集合，使我们可以使用函数而不是声明选项的方式书写 Vue 组件。它是一个概括性的术语，涵盖了以下方面的 API：</p>
<ul>
<li><a href="https://cn.vuejs.org/api/reactivity-core.html">响应式 API</a>：例如 <code>ref()</code> 和 <code>reactive()</code>，使我们可以直接创建响应式状态、计算属性和侦听器。</li>
<li><a href="https://cn.vuejs.org/api/composition-api-lifecycle.html">生命周期钩子</a>：例如 <code>onMounted()</code> 和 <code>onUnmounted()</code>，使我们可以在组件各个生命周期阶段添加逻辑。</li>
<li><a href="https://cn.vuejs.org/api/composition-api-dependency-injection.html">依赖注入</a>：例如 <code>provide()</code> 和 <code>inject()</code>，使我们可以在使用响应式 API 时，利用 Vue 的依赖注入系统。</li>
<li><a href="https://cn.vuejs.org/guide/reusability/composables.html">组合式函数</a></li>
<li><a href="https://cn.vuejs.org/guide/extras/composition-api-faq.html#%E7%8B%AC%E7%AB%8B%E7%9A%84-computed-%E5%B1%9E%E6%80%A7">组合式 API 常见问答</a></li>
</ul>
<h2 id="四、如何实现组件继承？"><a href="#四、如何实现组件继承？" class="headerlink" title="四、如何实现组件继承？"></a>四、如何实现组件继承？</h2><p>对于一位习惯使用面向对象编程语言的开发者而言，继承被视为一种自然而然的设计模式，Angular 对这一模式的支持更是加深了这种印象，使我一度认为继承是一种理所当然的选择。然而，Vue 并不特别推崇这种方案。在 Vue3 中，它更倾向于推荐使用 Composition API 和可复用的逻辑来实现组件间的复用，这导致我在刚开始的开发过程中着实不是很适应。</p>
<h3 id="1、Composition-API-的优势"><a href="#1、Composition-API-的优势" class="headerlink" title="1、Composition API 的优势"></a>1、Composition API 的优势</h3><ul>
<li>更好的可测试性：Composition API 的逻辑更容易被拆分成独立的单元进行测试。</li>
<li>更清晰的代码结构：每个组合函数负责一部分特定的逻辑，使代码更易于理解和维护。</li>
<li>更好的可复用性：逻辑可以通过组合函数在多个组件之间共享。</li>
</ul>
<h3 id="2、面向对象继承与-Composition-API-的对比"><a href="#2、面向对象继承与-Composition-API-的对比" class="headerlink" title="2、面向对象继承与 Composition API 的对比"></a>2、面向对象继承与 Composition API 的对比</h3><p>在面向对象继承中，可以直接重写方法，这通常意味着：</p>
<ul>
<li>简洁性：可以直接覆盖方法实现。</li>
<li>继承性：子类可以继承父类的所有属性和方法。</li>
<li>多态性：可以利用多态性来实现不同的行为。</li>
</ul>
<p>然而，面向对象继承也有一些缺点：</p>
<ul>
<li>紧耦合：类之间的关系紧密，修改一个类可能会影响到其他依赖它的类。</li>
<li>难以复用：类的逻辑通常与类本身绑定，不易于在不同场景下复用。</li>
<li>难以调试和测试：较大的类可能会包含许多逻辑，使得调试和测试变得复杂。</li>
</ul>
<h2 id="五、如何自定义指令？"><a href="#五、如何自定义指令？" class="headerlink" title="五、如何自定义指令？"></a>五、<a href="https://cn.vuejs.org/guide/reusability/custom-directives.html">如何自定义指令？</a></h2><p>在 <code>&lt;script setup&gt;</code> 中，任何以 <code>v</code> 开头的驼峰式命名的变量都可以被用作一个自定义指令。比如下面的例子，<code>vFocus</code> 即可以在模板中以 <code>v-focus</code> 的形式使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vFocus = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">mounted</span>: <span class="function">(<span class="params">el</span>) =&gt;</span> el.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>一般来讲，我们通常会单独封装一些通用指令，而很少会在单个 Vue 组件中自定义指令，比如我们可以这样做：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> vFocus = &#123;</span><br><span class="line">  <span class="attr">mounted</span>: <span class="function">(<span class="params">el</span>) =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用该指令时，我们可以手动导入使用它：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; vFocus &#125; <span class="keyword">from</span> <span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure>
<p>也可以将其全局注册到应用层级：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使 v-focus 在所有组件中都可用</span></span><br><span class="line">app.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, vFocus)</span><br></pre></td></tr></table></figure>
<p>而当我们在依赖包中自定义了 N 多个指令时，我们一般会采用插件的方式为每一个指令提供一个 <code>install</code> 方法，然后全局安装插件：</p>
<ol>
<li>首先定义一个为指令挂载 <code>install</code> 的通用方法：<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> withInstallDirective = &lt;T <span class="keyword">extends</span> <span class="title class_">Directive</span>&gt;<span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="attr">directive</span>: T,</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="attr">name</span>: <span class="built_in">string</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> &#123;</span><br><span class="line">  ;(directive <span class="keyword">as</span> <span class="title class_">SFCWithInstall</span>&lt;T&gt;).<span class="property">install</span> = (<span class="attr">app</span>: <span class="title class_">App</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    app.<span class="title function_">directive</span>(name, directive)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> directive <span class="keyword">as</span> <span class="title class_">SFCWithInstall</span>&lt;T&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>然后每一个指令使用该方法挂载 <code>install</code>：<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ElFocus</span> = <span class="title function_">withInstallDirective</span>(vFocus, <span class="string">&#x27;focus&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ElFocus</span></span><br></pre></td></tr></table></figure></li>
<li>最后在依赖包的 <code>index.ts</code> 中安装插件，同时将依赖包本身也作为插件挂载上 <code>install</code>：<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElFocus</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">plugins</span>: <span class="title class_">Plugin</span>[] = [</span><br><span class="line">  <span class="title class_">ElFocus</span>,</span><br><span class="line">  ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params"><span class="attr">app</span>: <span class="title class_">App</span></span>) &#123;</span><br><span class="line">    plugins.<span class="title function_">forEach</span>(<span class="function"><span class="params">c</span> =&gt;</span> app.<span class="title function_">use</span>(c)) <span class="comment">// app.use() 方法会自动调用插件的 install() 方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>上面借助<a href="https://cn.vuejs.org/guide/reusability/plugins.html">插件</a>的设计思路同时介绍了自定义的指令、组件如何实现完整引入和手动导入两种方式。<br>在 Angular 中，没有完整引入的概念，因此这里的<code>插件</code>、<code>install</code>、<code>use</code>需要稍微理解一下。</p>
<h2 id="六、如何自定义结构型指令？"><a href="#六、如何自定义结构型指令？" class="headerlink" title="六、如何自定义结构型指令？"></a>六、如何自定义结构型指令？</h2><p>在 Vue 中自定义结构型指令比在 Angular 中要简单的多，直接通过 <code>parentNode.appendChild()</code>、<code>parentNode.removeChild()</code> 实现即可。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设这里有一个权限检查函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAuth</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="comment">// 实现权限检查逻辑</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 返回布尔值表示用户是否有权限</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义自定义指令</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> vAuth = &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">checkAuth</span>(binding.<span class="property">value</span>)) &#123;</span><br><span class="line">      el.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(el); <span class="comment">// 移除 DOM 节点</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeUpdate</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">checkAuth</span>(binding.<span class="property">value</span>)) &#123;</span><br><span class="line">      el.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(el); <span class="comment">// 移除 DOM 节点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!el.<span class="property">parentNode</span>) &#123;</span><br><span class="line">      el.<span class="property">parentNode</span>.<span class="title function_">appendChild</span>(el); <span class="comment">// 如果已经被移除，则重新添加</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">updated</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">checkAuth</span>(binding.<span class="property">value</span>) &amp;&amp; !el.<span class="property">parentNode</span>) &#123;</span><br><span class="line">      el.<span class="property">parentNode</span>.<span class="title function_">appendChild</span>(el); <span class="comment">// 如果已经被移除，则重新添加</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="七、Vue3-中的依赖注入和-Angular-中的有什么区别？"><a href="#七、Vue3-中的依赖注入和-Angular-中的有什么区别？" class="headerlink" title="七、Vue3 中的依赖注入和 Angular 中的有什么区别？"></a>七、Vue3 中的依赖注入和 Angular 中的有什么区别？</h2><p>链接：<a href="https://cn.vuejs.org/guide/components/provide-inject.html">https://cn.vuejs.org/guide/components/provide-inject.html</a><br>在我看来，其实没什么区别，只是写法的区别。<br>在 Angular 中，先是在类的元数据中标记这是<code>可被注入的</code>，然后在 NgModule 的元数据的 <code>providers</code> 中提供，最后直接在其它类的构造函数中注入即可：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标记是可被注入的</span></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TestService</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Provide 提供</span></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  ...,</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">TestService</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接注入使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">OtherClass</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">ser</span>: <span class="title class_">TestService</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而在 Vue 中，没有元数据的概念，没有<code>可被注入的</code>概念，直接提供、直接注入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; provide &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">provide</span>(<span class="comment">/* 注入名 */</span> <span class="string">&#x27;message&#x27;</span>, <span class="comment">/* 值 */</span> <span class="string">&#x27;hello!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> message = <span class="title function_">inject</span>(<span class="string">&#x27;message&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当然也是可以全局注入的，具体参考上面链接中的官方文档。</p>
<h2 id="八、使用-Vite-Vue3-TypeScript，如何在一个工程中同时构建多个依赖包？如何组织目录更合理？"><a href="#八、使用-Vite-Vue3-TypeScript，如何在一个工程中同时构建多个依赖包？如何组织目录更合理？" class="headerlink" title="八、使用 Vite + Vue3 + TypeScript，如何在一个工程中同时构建多个依赖包？如何组织目录更合理？"></a>八、使用 Vite + Vue3 + TypeScript，如何在一个工程中同时构建多个依赖包？如何组织目录更合理？</h2><p>如果只是开发一个组件库，那么完全可以参考 <a href="https://element-plus.org/zh-CN/">Element Plus</a> 的目录结构和打包方式，或者也可以参考<a href="https://space.bilibili.com/69097065/channel/collectiondetail?sid=2881868">手把手带你手搓组件库</a>这样的视频教程，他其实也是参考了 Element Plus，只是不需要自己翻 Element Plus 的源码了。</p>
<p>虽然 Element Plus 是一个单一的组件库，但其内部仍然是拆分了多个子包，通过 <a href="https://www.pnpm.cn/">pnpm</a> 管理多个子包。pnpm 内置了对单一存储库（也称为多包存储库、多项目存储库或单体存储库）的支持， 你可以创建一个 workspace 以将多个项目合并到一个仓库中。但我不喜欢用 pnpm，因为我的 Angular 工程，使用 npm 下载依赖包运行程序没问题，使用 pnpm 下载运行就报错，当然是相同版本的 node 和相同的 package.json，我也懒得去研究了，还是继续使用 <a href="https://lerna.js.org/">Lerna</a> 来实现多包管理。</p>
<p>需求层面，我并不只是要实现单一的组件库，而是要包含 <a href="/2023/09/05/Lerna%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/">Lerna 学习与使用</a>中已经提到过的 <code>frame</code>、<code>components</code>、<code>charts</code>、<code>compoxes</code>、<code>utils</code> 等。废话不多说，直接开始吧。</p>
<h3 id="1、初始化-Vue-工程"><a href="#1、初始化-Vue-工程" class="headerlink" title="1、初始化 Vue 工程"></a>1、初始化 Vue 工程</h3><p>我还是习惯 Angular 的设计方案，它是区分应用程序 (application) 和库 (lib) 的，可以通过 cli 直接初始化一个应用程序项目 或 库项目，<em>当然 Vue 也是区分的，只是在打包的时候使用不同的 Vite 配置，需要手动配置</em>。在 Angular 中一般都是先创建一个应用程序，再通过 <code>ng g lib library[name] [options]</code> 命令创建一个库项目。Vue 没有这样的命令，只能手动创建。</p>
<p>通过 <code>npm create vite@latest my-vue-app -- --template vue-ts</code> 初始化一个工程之后，手动创建 <code>packages/frame</code>、<code>packages/components</code>、<code>packages/charts</code>、<code>packages/compoxes</code>、<code>packages/utils</code> 目录，并在各自目录下创建一个 <code>src</code> 目录和 <code>index.ts</code>、<code>package.json</code>、<code>vite.config.ts</code> 3个文件，此时整个工程目录是这样：<br><img width="150" alt="工程目录.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/Vue3入门/工程目录.png"></p>
<p>每一个子包都需要单独打包，所以每一个目录下都有一个 <code>vite.config.ts</code> 文件。</p>
<h3 id="2、初始化-Lerna"><a href="#2、初始化-Lerna" class="headerlink" title="2、初始化 Lerna"></a>2、初始化 Lerna</h3><p>在 <code>my-vue-app</code> 目录下直接执行 <code>npx lerna init --packages=&quot;packages/*&quot;</code> 即可，它会创建一个 <code>lerna.json</code> 文件，并安装 <code>lerna</code> 依赖。<br><strong>注意：</strong> 上面这个命令并不会在 <code>package.json</code> 中插入 <code>workspaces</code> 属性，需要我们手动添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">&quot;workspaces&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;packages/*&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来就可以直接无视 Lerna 了，我们还是正常使用 <code>npm install\uninstall</code>，当安装的是自己的子包时，也无需添加任何额外的参数，Lerna 会自动帮我们处理，并且在 <code>node_modules</code> 目录下，子包的目录会通过软链接的形式指向实际的代码目录，就像这样：<br><img width="300" alt="软链接.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/Vue3入门/软链接.png"></p>
<h3 id="3、配置-vite-config-ts"><a href="#3、配置-vite-config-ts" class="headerlink" title="3、配置 vite.config.ts"></a>3、配置 vite.config.ts</h3><p>可以像官方文档推荐的<a href="https://vitejs.cn/vite3-cn/guide/build.html#multi-page-app">库模式</a>那样只配置一个 <code>vite.config.ts</code> 文件，也可以像教程<a href="https://www.bilibili.com/video/BV1ji421X7GZ/?spm_id_from=333.788&vd_source=726ad3db70255a5ef4d7373d91735d76">项目打包</a>一样配置两个文件 <code>vite.es.config.ts</code> 和 <code>vite.umd.config.ts</code>。</p>
<h3 id="4、配置-package-json"><a href="#4、配置-package-json" class="headerlink" title="4、配置 package.json"></a>4、配置 package.json</h3><p>除了官方文档推荐的内容之外，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;my-lib&quot;</span>,</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">  <span class="string">&quot;files&quot;</span>: [<span class="string">&quot;dist&quot;</span>],</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;./dist/my-lib.umd.cjs&quot;</span>,</span><br><span class="line">  <span class="string">&quot;module&quot;</span>: <span class="string">&quot;./dist/my-lib.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;exports&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;.&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;import&quot;</span>: <span class="string">&quot;./dist/my-lib.js&quot;</span>,</span><br><span class="line">      <span class="string">&quot;require&quot;</span>: <span class="string">&quot;./dist/my-lib.umd.cjs&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还有必要加入其它信息：<code>version</code>、<code>description</code>、<code>publishConfig</code> 等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;my-lib&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;my lib&quot;</span>,</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">  <span class="string">&quot;publishConfig&quot;</span>: &#123;  <span class="comment">// 如果有必要的话</span></span><br><span class="line">    <span class="string">&quot;access&quot;</span>: <span class="string">&quot;publish&quot;</span>,</span><br><span class="line">    <span class="string">&quot;registry&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;files&quot;</span>: [<span class="string">&quot;dist&quot;</span>],</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;./dist/my-lib.umd.cjs&quot;</span>,</span><br><span class="line">  <span class="string">&quot;module&quot;</span>: <span class="string">&quot;./dist/my-lib.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;exports&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;.&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;import&quot;</span>: <span class="string">&quot;./dist/my-lib.js&quot;</span>,</span><br><span class="line">      <span class="string">&quot;require&quot;</span>: <span class="string">&quot;./dist/my-lib.umd.cjs&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5、打包"><a href="#5、打包" class="headerlink" title="5、打包"></a>5、打包</h3><p>我们可以切换到各自目录下执行 <code>vite build</code> 目录，因为当以命令行方式运行 <code>vite</code> 时，Vite 会自动解析当前目录下名为 <code>vite.config.ts</code> 的文件，也可以显式地通过 <code>--config</code> 命令行选项指定一个配置文件（相对于 <code>cwd</code> 路径进行解析），比如这样，直接在根目录的 <code>package.json</code> 中配置打包脚本，并指定 <code>vite.config.ts</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;vite&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vite build&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build:lib&quot;</span>: <span class="string">&quot;npm run build:utils &amp;&amp; npm run build:components &amp;&amp; npm run build:compoxes &amp;&amp; npm run build:charts &amp;&amp; npm run build:frame&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build:charts&quot;</span>: <span class="string">&quot;vite build --config packages/charts/vite.config.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build:components&quot;</span>: <span class="string">&quot;vite build --config packages/components/vite.config.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build:compoxes&quot;</span>: <span class="string">&quot;vite build --config packages/compoxes/vite.config.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build:frame&quot;</span>: <span class="string">&quot;vite build --config packages/frame/vite.config.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build:utils&quot;</span>: <span class="string">&quot;vite build --config packages/utils/vite.config.ts&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="九、依赖包如何自动生成-d-ts-声明文件？"><a href="#九、依赖包如何自动生成-d-ts-声明文件？" class="headerlink" title="九、依赖包如何自动生成 .d.ts 声明文件？"></a>九、依赖包如何自动生成 <code>.d.ts</code> 声明文件？</h2><p>上面经过一些列的配置，已经能够正常打包了，但还不能自动生成 <code>.d.ts</code> 声明文件，这在使用依赖包时并不友好。我们可以直接通过 <code>vite-plugin-dts</code> 插件自动生成声明文件，但过程中也遇到了一些问题，需要记录下。</p>
<h3 id="1、安装并配置-vite-plugin-dts-插件"><a href="#1、安装并配置-vite-plugin-dts-插件" class="headerlink" title="1、安装并配置 vite-plugin-dts 插件"></a>1、安装并配置 vite-plugin-dts 插件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i vite-plugin-dts -D</span><br></pre></td></tr></table></figure>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> dts <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-dts&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>(), <span class="title function_">dts</span>()],</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">lib</span>: &#123;</span><br><span class="line">      <span class="attr">entry</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;lib/main.js&#x27;</span>),</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;MyLib&#x27;</span>,</span><br><span class="line">      <span class="comment">// the proper extensions will be added</span></span><br><span class="line">      <span class="attr">fileName</span>: <span class="string">&#x27;my-lib&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="comment">// 确保外部化处理那些你不想打包进库的依赖</span></span><br><span class="line">      <span class="attr">external</span>: [<span class="string">&#x27;vue&#x27;</span>],</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">// 在 UMD 构建模式下为这些外部化的依赖提供一个全局变量</span></span><br><span class="line">        <span class="attr">globals</span>: &#123;</span><br><span class="line">          <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="2、打包"><a href="#2、打包" class="headerlink" title="2、打包"></a>2、打包</h3><p>此时直接打包，如果使用的是 <code>&quot;vite-plugin-dts&quot;: &quot;^4.0.2&quot;</code> 版本，并没有自动生成声明文件；如果使用的是 <code>&quot;vite-plugin-dts&quot;: &quot;^3.9.1&quot;</code> 版本，还会报错：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">index.<span class="property">ts</span>:<span class="number">1</span>:<span class="number">15</span> - error <span class="title class_">TS2792</span>: <span class="title class_">Cannot</span> find <span class="variable language_">module</span> <span class="string">&#x27;./src/vue&#x27;</span>. <span class="title class_">Did</span> you mean to set the <span class="string">&#x27;moduleResolution&#x27;</span> option to <span class="string">&#x27;nodenext&#x27;</span>, or to add aliases to the <span class="string">&#x27;paths&#x27;</span> option?</span><br></pre></td></tr></table></figure>
<p>经过<a href="https://blog.csdn.net/weixin_57818879/article/details/140072524">前端 Vite 项目使用 vite-plugin-dts 打包输出.d.ts文件，分析处理踩坑</a>的解释，应该就是 <code>tsconfig.json</code> 的原因。<br><img width="700" alt="报错环境.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/Vue3入门/报错环境.png"><br><img width="700" alt="分析和解决.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/Vue3入门/分析和解决.png"></p>
<p>所以我们可以在各子包目录下新建一个 <code>tsconfig.build.json</code> 文件，内容直接复制 <code>tsconfig.app.json</code> 中的内容，然后再改下 <code>include</code> 路径即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;./index.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./src/**/*.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./src/**/*.vue&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后再将 <code>tsconfig.build.json</code> 配置到 <code>vite-plugin-dts</code> 插件中就能够自动生成声明文件了。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> dts <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-dts&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>(), <span class="title function_">dts</span>(&#123; <span class="attr">tsconfigPath</span>: <span class="string">&#x27;./tsconfig.build.json&#x27;</span>, <span class="attr">outDir</span>: <span class="string">&#x27;./dist/types&#x27;</span> &#125;)],</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">lib</span>: &#123;</span><br><span class="line">      <span class="attr">entry</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;lib/main.js&#x27;</span>),</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;MyLib&#x27;</span>,</span><br><span class="line">      <span class="comment">// the proper extensions will be added</span></span><br><span class="line">      <span class="attr">fileName</span>: <span class="string">&#x27;my-lib&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="comment">// 确保外部化处理那些你不想打包进库的依赖</span></span><br><span class="line">      <span class="attr">external</span>: [<span class="string">&#x27;vue&#x27;</span>],</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">// 在 UMD 构建模式下为这些外部化的依赖提供一个全局变量</span></span><br><span class="line">        <span class="attr">globals</span>: &#123;</span><br><span class="line">          <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>最后不要忘了在 <code>package.json</code> 中添加类型声明文件路径。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;my-lib&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;my lib&quot;</span>,</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">  <span class="string">&quot;publishConfig&quot;</span>: &#123;  <span class="comment">// 如果有必要的话</span></span><br><span class="line">    <span class="string">&quot;access&quot;</span>: <span class="string">&quot;publish&quot;</span>,</span><br><span class="line">    <span class="string">&quot;registry&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;files&quot;</span>: [<span class="string">&quot;dist&quot;</span>],</span><br><span class="line">  <span class="string">&quot;types&quot;</span>: <span class="string">&quot;./dist/types/index.d.ts&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;./dist/my-lib.umd.cjs&quot;</span>,</span><br><span class="line">  <span class="string">&quot;module&quot;</span>: <span class="string">&quot;./dist/my-lib.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;exports&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;.&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;types&quot;</span>: <span class="string">&quot;./dist/types/index.d.ts&quot;</span>,</span><br><span class="line">      <span class="string">&quot;import&quot;</span>: <span class="string">&quot;./dist/my-lib.js&quot;</span>,</span><br><span class="line">      <span class="string">&quot;require&quot;</span>: <span class="string">&quot;./dist/my-lib.umd.cjs&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="十、如何实现国际化？"><a href="#十、如何实现国际化？" class="headerlink" title="十、如何实现国际化？"></a>十、如何实现国际化？</h2><p>Vue 应用程序本身实现国际化比较简单，使用 <a href="https://vue-i18n.intlify.dev/">vue-i18n</a> 很容易达到目的。首先是创建并安装 <code>i18n</code> 实例：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> i18n = <span class="title function_">createI18n</span>(&#123;</span><br><span class="line">  <span class="attr">locale</span>: <span class="string">&#x27;ja&#x27;</span>,</span><br><span class="line">  <span class="attr">fallbackLocale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">messages</span>: &#123;</span><br><span class="line">    <span class="attr">en</span>: &#123;</span><br><span class="line">      <span class="attr">message</span>: &#123;</span><br><span class="line">        <span class="attr">hello</span>: <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">ja</span>: &#123;</span><br><span class="line">      <span class="attr">message</span>: &#123;</span><br><span class="line">        <span class="attr">hello</span>: <span class="string">&#x27;こんにちは、世界&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">Vue</span>)</span><br><span class="line">app.<span class="title function_">use</span>(i18n)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>然后在模板中直接使用即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; $t(&#x27;message.hello&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>那在依赖包中如何实现国际化呢？首先想到的是采用 Element Plus 的方案，完全自己实现，但既然我们的主体应用程序（就是使用了上述几个子包的主程序，也就是某个产品或项目的具体应用程序）不可避免的需要使用 <code>vue-i18n</code>，那能否借助它来实现子包的国际化呢？答案是肯定的。<br><em>TODO: 未完待续。</em></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>http-server开启https服务</title>
    <url>/2022/08/17/http-server%E5%BC%80%E5%90%AFhttps%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>直接使用 http-server 命令开启的是 http 服务，在 npmjs 的官网地址中只是看到了 http-server -S 是开启 https 服务的方法，但是我这边直接使用该命令会报如下所示的错误，具体原因是没有证书密钥对文件。<br><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/http-server%E5%BC%80%E5%90%AFhttps%E6%9C%8D%E5%8A%A1/%E6%97%A0%E8%AF%81%E4%B9%A6%E6%96%87%E4%BB%B6%E9%94%99%E8%AF%AF.png" alt="无证书文件错误.png"></p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul>
<li>1、下载安装openssl</li>
<li>2、使用以下命令生成一个证书密钥对 key.pem 和 cert.pem，设置有效期约10年（准确地说是3650天）<br><code>openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem</code></li>
<li>3、然后就可以起服务了<br><code>http-server -S</code></li>
</ul>
<hr>
<p>下面这个记不清是在什么场景下使用的了<br>在html的头部加入meta使得所有的资源请求由http请求转成https请求<br><code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;upgrade-insecure-requests&quot;&gt;</code></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>markdown文件转word文件</title>
    <url>/2023/01/11/markdown%E6%96%87%E4%BB%B6%E8%BD%ACword%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul>
<li>1、安装nodejs</li>
<li>2、安装marked，<code>npm i marked</code></li>
<li>3、转换成doc格式前，需要把md文件转换为html标签格式，才能保留doc文件中的样式，新建立<code>head.html</code>模板文件，内容如下：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Markdoc Preview<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"><span class="selector-tag">html</span> &#123;<span class="attribute">font-family</span>: sans-serif; -ms-<span class="selector-tag">text</span>-size-adjust: <span class="number">100%</span>; -webkit-<span class="selector-tag">text</span>-size-adjust: <span class="number">100%</span>; &#125;<span class="selector-tag">body</span> &#123;<span class="attribute">margin</span>: <span class="number">0</span>;&#125;<span class="selector-tag">article</span>,<span class="selector-tag">aside</span>,<span class="selector-tag">details</span>,<span class="selector-tag">figcaption</span>,<span class="selector-tag">figure</span>,<span class="selector-tag">footer</span>,<span class="selector-tag">header</span>,<span class="selector-tag">hgroup</span>,<span class="selector-tag">main</span>,<span class="selector-tag">nav</span>,<span class="selector-tag">section</span>,<span class="selector-tag">summary</span> &#123;<span class="attribute">display</span>: block;&#125;<span class="selector-tag">audio</span>,<span class="selector-tag">canvas</span>,progress,<span class="selector-tag">video</span> &#123;<span class="attribute">display</span>: inline-block; <span class="attribute">vertical-align</span>: baseline; &#125;<span class="selector-tag">audio</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[controls]</span>) &#123;<span class="attribute">display</span>: none;<span class="attribute">height</span>: <span class="number">0</span>;&#125;<span class="selector-attr">[hidden]</span>,template &#123;<span class="attribute">display</span>: none;&#125;<span class="selector-tag">a</span> &#123;<span class="attribute">background</span>: transparent;&#125;<span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">outline</span>: <span class="number">0</span>;&#125;<span class="selector-tag">abbr</span><span class="selector-attr">[title]</span> &#123;<span class="attribute">border-bottom</span>: <span class="number">1px</span> dotted;&#125;<span class="selector-tag">b</span>,<span class="selector-tag">strong</span> &#123;<span class="attribute">font-weight</span>: bold;&#125;<span class="selector-tag">dfn</span> &#123;<span class="attribute">font-style</span>: italic;&#125;<span class="selector-tag">h1</span> &#123;<span class="attribute">font-size</span>: <span class="number">2em</span>;<span class="attribute">margin</span>: <span class="number">0.67em</span> <span class="number">0</span>;&#125;<span class="selector-tag">mark</span> &#123;<span class="attribute">background</span>: <span class="number">#ff0</span>;<span class="attribute">color</span>: <span class="number">#000</span>;&#125;small &#123;<span class="attribute">font-size</span>: <span class="number">80%</span>;&#125;sub,<span class="selector-tag">sup</span> &#123;<span class="attribute">font-size</span>: <span class="number">75%</span>;<span class="attribute">line-height</span>: <span class="number">0</span>;<span class="attribute">position</span>: relative;<span class="attribute">vertical-align</span>: baseline;&#125;<span class="selector-tag">sup</span> &#123;<span class="attribute">top</span>: -<span class="number">0.5em</span>;&#125;sub &#123;<span class="attribute">bottom</span>: -<span class="number">0.25em</span>;&#125;<span class="selector-tag">img</span> &#123;<span class="attribute">border</span>: <span class="number">0</span>;&#125;<span class="selector-tag">svg</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:root</span>) &#123;<span class="attribute">overflow</span>: hidden;&#125;<span class="selector-tag">figure</span> &#123;<span class="attribute">margin</span>: <span class="number">1em</span> <span class="number">40px</span>;&#125;hr &#123;-moz-<span class="attribute">box-sizing</span>: content-box;<span class="attribute">box-sizing</span>: content-box;<span class="attribute">height</span>: <span class="number">0</span>;&#125;pre &#123;<span class="attribute">overflow</span>: auto;&#125;<span class="selector-tag">code</span>,<span class="selector-tag">kbd</span>,pre,<span class="selector-tag">samp</span> &#123;<span class="attribute">font-family</span>: monospace, monospace;<span class="attribute">font-size</span>: <span class="number">1em</span>;&#125;<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">optgroup</span>,<span class="selector-tag">select</span>,<span class="selector-tag">textarea</span> &#123;<span class="attribute">color</span>: inherit; <span class="attribute">font</span>: inherit; <span class="attribute">margin</span>: <span class="number">0</span>; &#125;<span class="selector-tag">button</span> &#123;<span class="attribute">overflow</span>: visible;&#125;<span class="selector-tag">button</span>,<span class="selector-tag">select</span> &#123;<span class="attribute">text-transform</span>: none;&#125;<span class="selector-tag">button</span>,<span class="selector-tag">html</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;button&quot;</span>]</span>, <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;reset&quot;</span>]</span>,<span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span> &#123;-webkit-<span class="attribute">appearance</span>: button; <span class="attribute">cursor</span>: pointer; &#125;<span class="selector-tag">button</span><span class="selector-attr">[disabled]</span>,<span class="selector-tag">html</span> <span class="selector-tag">input</span><span class="selector-attr">[disabled]</span> &#123;<span class="attribute">cursor</span>: default;&#125;<span class="selector-tag">button</span>::-moz-focus-inner,input::-moz-focus-inner &#123;<span class="attribute">border</span>: <span class="number">0</span>;<span class="attribute">padding</span>: <span class="number">0</span>;&#125;<span class="selector-tag">input</span> &#123;<span class="attribute">line-height</span>: normal;&#125;<span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;checkbox&quot;</span>]</span>,<span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;radio&quot;</span>]</span> &#123;<span class="attribute">box-sizing</span>: border-box; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;<span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;number&quot;</span>]</span>::-webkit-inner-spin-button,input[type=<span class="string">&quot;number&quot;</span>]::-webkit-outer-spin-button &#123;<span class="attribute">height</span>: auto;&#125;<span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;search&quot;</span>]</span> &#123;-webkit-<span class="attribute">appearance</span>: textfield; -moz-<span class="attribute">box-sizing</span>: content-box;-webkit-<span class="attribute">box-sizing</span>: content-box; <span class="attribute">box-sizing</span>: content-box;&#125;<span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;search&quot;</span>]</span>::-webkit-search-cancel-button,input[type=<span class="string">&quot;search&quot;</span>]::-webkit-search-decoration &#123;-webkit-<span class="attribute">appearance</span>: none;&#125;<span class="selector-tag">fieldset</span> &#123;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#c0c0c0</span>;<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">2px</span>;<span class="attribute">padding</span>: <span class="number">0.35em</span> <span class="number">0.625em</span> <span class="number">0.75em</span>;&#125;<span class="selector-tag">legend</span> &#123;<span class="attribute">border</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;<span class="selector-tag">textarea</span> &#123;<span class="attribute">overflow</span>: auto;&#125;<span class="selector-tag">optgroup</span> &#123;<span class="attribute">font-weight</span>: bold;&#125;<span class="selector-tag">table</span> &#123;<span class="attribute">border-collapse</span>: collapse;<span class="attribute">border-spacing</span>: <span class="number">0</span>;&#125;<span class="selector-tag">td</span>,<span class="selector-tag">th</span> &#123;<span class="attribute">padding</span>: <span class="number">0</span>;&#125;* &#123;-webkit-<span class="attribute">box-sizing</span>: border-box;-moz-<span class="attribute">box-sizing</span>: border-box;<span class="attribute">box-sizing</span>: border-box;&#125;*<span class="selector-pseudo">:before</span>,*<span class="selector-pseudo">:after</span> &#123;-webkit-<span class="attribute">box-sizing</span>: border-box;-moz-<span class="attribute">box-sizing</span>: border-box;<span class="attribute">box-sizing</span>: border-box;&#125;<span class="selector-tag">html</span> &#123;<span class="attribute">font-size</span>: <span class="number">62.5%</span>;-webkit-tap-highlight-<span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;<span class="selector-tag">body</span> &#123;<span class="attribute">font-family</span>: <span class="string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, Arial, <span class="string">&#x27;Microsoft Yahei&#x27;</span>, sans-serif;<span class="attribute">font-size</span>: <span class="number">14px</span>;<span class="attribute">line-height</span>: <span class="number">1.42857143</span>;<span class="attribute">color</span>: <span class="number">#333333</span>;<span class="attribute">background-color</span>: <span class="number">#ffffff</span>;&#125;<span class="selector-tag">input</span>,<span class="selector-tag">button</span>,<span class="selector-tag">select</span>,<span class="selector-tag">textarea</span> &#123;<span class="attribute">font-family</span>: inherit;<span class="attribute">font-size</span>: inherit;<span class="attribute">line-height</span>: inherit;&#125;<span class="selector-tag">a</span> &#123;<span class="attribute">color</span>: <span class="number">#428bca</span>;<span class="attribute">text-decoration</span>: none;&#125;<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:focus</span> &#123;<span class="attribute">color</span>: <span class="number">#2a6496</span>;<span class="attribute">text-decoration</span>: underline;&#125;<span class="selector-tag">a</span><span class="selector-pseudo">:focus</span> &#123;<span class="attribute">outline</span>: thin dotted;<span class="attribute">outline</span>: <span class="number">5px</span> auto -webkit-focus-ring-color;<span class="attribute">outline-offset</span>: -<span class="number">2px</span>;&#125;<span class="selector-tag">figure</span> &#123;<span class="attribute">margin</span>: <span class="number">0</span>;&#125;<span class="selector-tag">img</span> &#123;<span class="attribute">vertical-align</span>: middle;&#125;<span class="selector-class">.hljs</span> &#123;<span class="attribute">display</span>: block;<span class="attribute">overflow-x</span>: auto;<span class="attribute">padding</span>: <span class="number">0.5em</span>;<span class="attribute">background</span>: <span class="number">#f0f0f0</span>;-webkit-<span class="selector-tag">text</span>-size-adjust: none;&#125;<span class="selector-class">.hljs</span>,<span class="selector-class">.hljs-subst</span>,<span class="selector-class">.hljs-tag</span> <span class="selector-class">.hljs-title</span>,<span class="selector-class">.nginx</span> <span class="selector-class">.hljs-title</span> &#123;<span class="attribute">color</span>: black;&#125;<span class="selector-class">.hljs-string</span>,<span class="selector-class">.hljs-title</span>,<span class="selector-class">.hljs-constant</span>,<span class="selector-class">.hljs-parent</span>,<span class="selector-class">.hljs-tag</span> <span class="selector-class">.hljs-value</span>,<span class="selector-class">.hljs-rules</span> <span class="selector-class">.hljs-value</span>,<span class="selector-class">.hljs-preprocessor</span>,<span class="selector-class">.hljs-pragma</span>,<span class="selector-class">.haml</span> <span class="selector-class">.hljs-symbol</span>,<span class="selector-class">.ruby</span> <span class="selector-class">.hljs-symbol</span>,<span class="selector-class">.ruby</span> <span class="selector-class">.hljs-symbol</span> <span class="selector-class">.hljs-string</span>,<span class="selector-class">.hljs-template_tag</span>,<span class="selector-class">.django</span> <span class="selector-class">.hljs-variable</span>,<span class="selector-class">.smalltalk</span> <span class="selector-class">.hljs-class</span>,<span class="selector-class">.hljs-addition</span>,<span class="selector-class">.hljs-flow</span>,<span class="selector-class">.hljs-stream</span>,<span class="selector-class">.bash</span> <span class="selector-class">.hljs-variable</span>,<span class="selector-class">.apache</span> <span class="selector-class">.hljs-tag</span>,<span class="selector-class">.apache</span> <span class="selector-class">.hljs-cbracket</span>,<span class="selector-class">.tex</span> <span class="selector-class">.hljs-command</span>,<span class="selector-class">.tex</span> <span class="selector-class">.hljs-special</span>,<span class="selector-class">.erlang_repl</span> <span class="selector-class">.hljs-function_or_atom</span>,<span class="selector-class">.asciidoc</span> <span class="selector-class">.hljs-header</span>,<span class="selector-class">.markdown</span> <span class="selector-class">.hljs-header</span>,<span class="selector-class">.coffeescript</span> <span class="selector-class">.hljs-attribute</span> &#123;<span class="attribute">color</span>: <span class="number">#800</span>;&#125;<span class="selector-class">.smartquote</span>,<span class="selector-class">.hljs-comment</span>,<span class="selector-class">.hljs-annotation</span>,<span class="selector-class">.diff</span> <span class="selector-class">.hljs-header</span>,<span class="selector-class">.hljs-chunk</span>,<span class="selector-class">.asciidoc</span> <span class="selector-class">.hljs-blockquote</span>,<span class="selector-class">.markdown</span> <span class="selector-class">.hljs-blockquote</span> &#123;<span class="attribute">color</span>: <span class="number">#888</span>;&#125;<span class="selector-class">.hljs-number</span>,<span class="selector-class">.hljs-date</span>,<span class="selector-class">.hljs-regexp</span>,<span class="selector-class">.hljs-literal</span>,<span class="selector-class">.hljs-hexcolor</span>,<span class="selector-class">.smalltalk</span> <span class="selector-class">.hljs-symbol</span>,<span class="selector-class">.smalltalk</span> <span class="selector-class">.hljs-char</span>,<span class="selector-class">.go</span> <span class="selector-class">.hljs-constant</span>,<span class="selector-class">.hljs-change</span>,<span class="selector-class">.lasso</span> <span class="selector-class">.hljs-variable</span>,<span class="selector-class">.makefile</span> <span class="selector-class">.hljs-variable</span>,<span class="selector-class">.asciidoc</span> <span class="selector-class">.hljs-bullet</span>,<span class="selector-class">.markdown</span> <span class="selector-class">.hljs-bullet</span>,<span class="selector-class">.asciidoc</span> <span class="selector-class">.hljs-link_url</span>,<span class="selector-class">.markdown</span> <span class="selector-class">.hljs-link_url</span> &#123;<span class="attribute">color</span>: <span class="number">#080</span>;&#125;<span class="selector-class">.hljs-label</span>,<span class="selector-class">.hljs-javadoc</span>,<span class="selector-class">.ruby</span> <span class="selector-class">.hljs-string</span>,<span class="selector-class">.hljs-decorator</span>,<span class="selector-class">.hljs-filter</span> <span class="selector-class">.hljs-argument</span>,<span class="selector-class">.hljs-localvars</span>,<span class="selector-class">.hljs-array</span>,<span class="selector-class">.hljs-attr_selector</span>,<span class="selector-class">.hljs-important</span>,<span class="selector-class">.hljs-pseudo</span>,<span class="selector-class">.hljs-pi</span>,<span class="selector-class">.haml</span> <span class="selector-class">.hljs-bullet</span>,<span class="selector-class">.hljs-doctype</span>,<span class="selector-class">.hljs-deletion</span>,<span class="selector-class">.hljs-envvar</span>,<span class="selector-class">.hljs-shebang</span>,<span class="selector-class">.apache</span> <span class="selector-class">.hljs-sqbracket</span>,<span class="selector-class">.nginx</span> <span class="selector-class">.hljs-built_in</span>,<span class="selector-class">.tex</span> <span class="selector-class">.hljs-formula</span>,<span class="selector-class">.erlang_repl</span> <span class="selector-class">.hljs-reserved</span>,<span class="selector-class">.hljs-prompt</span>,<span class="selector-class">.asciidoc</span> <span class="selector-class">.hljs-link_label</span>,<span class="selector-class">.markdown</span> <span class="selector-class">.hljs-link_label</span>,<span class="selector-class">.vhdl</span> <span class="selector-class">.hljs-attribute</span>,<span class="selector-class">.clojure</span> <span class="selector-class">.hljs-attribute</span>,<span class="selector-class">.asciidoc</span> <span class="selector-class">.hljs-attribute</span>,<span class="selector-class">.lasso</span> <span class="selector-class">.hljs-attribute</span>,<span class="selector-class">.coffeescript</span> <span class="selector-class">.hljs-property</span>,<span class="selector-class">.hljs-phony</span> &#123;<span class="attribute">color</span>: <span class="number">#88f</span>;&#125;<span class="selector-class">.hljs-keyword</span>,<span class="selector-class">.hljs-id</span>,<span class="selector-class">.hljs-title</span>,<span class="selector-class">.hljs-built_in</span>,<span class="selector-class">.css</span> <span class="selector-class">.hljs-tag</span>,<span class="selector-class">.hljs-javadoctag</span>,<span class="selector-class">.hljs-phpdoc</span>,<span class="selector-class">.hljs-dartdoc</span>,<span class="selector-class">.hljs-yardoctag</span>,<span class="selector-class">.smalltalk</span> <span class="selector-class">.hljs-class</span>,<span class="selector-class">.hljs-winutils</span>,<span class="selector-class">.bash</span> <span class="selector-class">.hljs-variable</span>,<span class="selector-class">.apache</span> <span class="selector-class">.hljs-tag</span>,<span class="selector-class">.hljs-type</span>,<span class="selector-class">.hljs-typename</span>,<span class="selector-class">.tex</span> <span class="selector-class">.hljs-command</span>,<span class="selector-class">.asciidoc</span> <span class="selector-class">.hljs-strong</span>,<span class="selector-class">.markdown</span> <span class="selector-class">.hljs-strong</span>,<span class="selector-class">.hljs-request</span>,<span class="selector-class">.hljs-status</span> &#123;<span class="attribute">font-weight</span>: bold;&#125;<span class="selector-class">.asciidoc</span> <span class="selector-class">.hljs-emphasis</span>,<span class="selector-class">.markdown</span> <span class="selector-class">.hljs-emphasis</span> &#123;<span class="attribute">font-style</span>: italic;&#125;<span class="selector-class">.nginx</span> <span class="selector-class">.hljs-built_in</span> &#123;<span class="attribute">font-weight</span>: normal;&#125;<span class="selector-class">.coffeescript</span> <span class="selector-class">.javascript</span>,<span class="selector-class">.javascript</span> <span class="selector-class">.xml</span>,<span class="selector-class">.lasso</span> <span class="selector-class">.markup</span>,<span class="selector-class">.tex</span> <span class="selector-class">.hljs-formula</span>,<span class="selector-class">.xml</span> <span class="selector-class">.javascript</span>,<span class="selector-class">.xml</span> <span class="selector-class">.vbscript</span>,<span class="selector-class">.xml</span> <span class="selector-class">.css</span>,<span class="selector-class">.xml</span> <span class="selector-class">.hljs-cdata</span> &#123;<span class="attribute">opacity</span>: <span class="number">0.5</span>;&#125;<span class="selector-id">#container</span> &#123;<span class="attribute">padding</span>: <span class="number">15px</span>;<span class="attribute">margin-left</span>:<span class="number">20px</span>;&#125;pre &#123;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">border-radius</span>: <span class="number">4px</span>;<span class="attribute">display</span>: block;&#125;pre <span class="selector-tag">code</span> &#123;<span class="attribute">white-space</span>: pre-wrap;&#125;<span class="selector-class">.hljs</span>,<span class="selector-tag">code</span> &#123;<span class="attribute">font-family</span>: Monaco, Menlo, Consolas, <span class="string">&#x27;Courier New&#x27;</span>, monospace;&#125;pre&#123;<span class="attribute">background-color</span>: <span class="number">#dddddd</span>;<span class="attribute">padding</span>:<span class="number">8px</span> <span class="number">0px</span> <span class="number">8px</span> <span class="number">30px</span>;<span class="attribute">word-wrap</span>: break-word;&#125;<span class="selector-tag">table</span> <span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n) &#123;<span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">158</span>,<span class="number">188</span>,<span class="number">226</span>,<span class="number">0.12</span>); &#125;<span class="selector-pseudo">:not</span>(pre) &gt; <span class="selector-tag">code</span> &#123;<span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">4px</span>;<span class="attribute">font-size</span>: <span class="number">90%</span>;<span class="attribute">color</span>: <span class="number">#c7254e</span>;<span class="attribute">background-color</span>: <span class="number">#f9f2f4</span>;<span class="attribute">white-space</span>: nowrap;<span class="attribute">border-radius</span>: <span class="number">4px</span>;&#125;<span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">12px</span>;&#125;<span class="selector-tag">blockquote</span> &#123;<span class="attribute">border-left-width</span>: <span class="number">10px</span>;<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">102</span>,<span class="number">128</span>,<span class="number">153</span>,<span class="number">0.05</span>);<span class="attribute">border-top-right-radius</span>: <span class="number">5px</span>;<span class="attribute">border-bottom-right-radius</span>: <span class="number">5px</span>;<span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">20px</span>&#125;<span class="selector-tag">blockquote</span><span class="selector-class">.pull-right</span> small<span class="selector-pseudo">:before</span>,<span class="selector-tag">blockquote</span><span class="selector-class">.pull-right</span> <span class="selector-class">.small</span><span class="selector-pseudo">:before</span> &#123;<span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>&#125;<span class="selector-tag">blockquote</span><span class="selector-class">.pull-right</span> small<span class="selector-pseudo">:after</span>,<span class="selector-tag">blockquote</span><span class="selector-class">.pull-right</span> <span class="selector-class">.small</span><span class="selector-pseudo">:after</span> &#123;<span class="attribute">content</span>: <span class="string">&#x27;\00A0 \2014&#x27;</span>&#125;<span class="selector-tag">blockquote</span><span class="selector-pseudo">:before</span>,<span class="selector-tag">blockquote</span><span class="selector-pseudo">:after</span> &#123;<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>&#125;<span class="selector-tag">blockquote</span> &#123;<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1.1em</span>&#125;<span class="selector-tag">blockquote</span> <span class="selector-tag">p</span> &#123;<span class="attribute">margin-bottom</span>: <span class="number">1.1em</span>;<span class="attribute">font-size</span>: <span class="number">1em</span>;<span class="attribute">line-height</span>: <span class="number">1.45</span>&#125;<span class="selector-tag">blockquote</span> <span class="selector-tag">ul</span><span class="selector-pseudo">:last-child</span>,<span class="selector-tag">blockquote</span> <span class="selector-tag">ol</span><span class="selector-pseudo">:last-child</span> &#123;<span class="attribute">margin-bottom</span>: <span class="number">0</span>&#125;<span class="selector-tag">blockquote</span> &#123;<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">21px</span>;<span class="attribute">border-left</span>: <span class="number">10px</span> solid <span class="number">#dddddd</span>;&#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      replace_area</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>4、新建js脚本文件<code>convert.js</code>内容如下：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> &#123; marked &#125; = <span class="built_in">require</span>(<span class="string">&#x27;marked&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取第3步创建的模板html文件</span></span><br><span class="line"><span class="keyword">var</span> headFile = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;head.html&#x27;</span>);</span><br><span class="line"><span class="comment">// 读取将要被转换的md文件</span></span><br><span class="line"><span class="keyword">var</span> mdFile = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;mark.md&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(&#x27;----正在转换...&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用marked将md文件转换成html</span></span><br><span class="line"><span class="keyword">var</span> mdToHtmlStr = <span class="title function_">marked</span>(mdFile.<span class="title function_">toString</span>());</span><br><span class="line"><span class="comment">// 将md转换成html字符串替换到html模板文件中replace_area的位置</span></span><br><span class="line"><span class="keyword">var</span> content = headFile.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="string">&#x27;replace_area&#x27;</span>, mdToHtmlStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(&quot;准备写入文件&quot;);</span></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;output.doc&#x27;</span>, content, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据写入成功！&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// console.log(content);</span></span><br></pre></td></tr></table></figure></li>
<li>5、运行脚本<code>node convert.js</code>即可</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>VS Code的一些偏好设置</title>
    <url>/2023/02/22/vscode%E7%9A%84%E4%B8%80%E4%BA%9B%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p><a href="https://code.visualstudio.com/">VS Code</a>作为前端开发的必备神器，其作用自然不必多说。这里记录下个人的使用习惯，免得以后再查。</p>
<h3 id="1-颜色主题"><a href="#1-颜色主题" class="headerlink" title="1.颜色主题"></a>1.颜色主题</h3><p>使用这个：Monokai</p>
<h3 id="2-通过code命令快速启动"><a href="#2-通过code命令快速启动" class="headerlink" title="2.通过code命令快速启动"></a>2.通过code命令快速启动</h3><p>如果想在某目录下直接通过<code>code ./</code>命令打开vscode，需做如下配置：</p>
<p>打开vscode，command + shift + p，然后输入shell，选择<code>Install &#39;code&#39; command in PATH</code></p>
<h3 id="3-保存全部文件"><a href="#3-保存全部文件" class="headerlink" title="3.保存全部文件"></a>3.保存全部文件</h3><p>默认<code>command + s</code>只保存当前文件，如果想保存全部文件，需做如下配置：</p>
<p>Preferences ——&gt; Keyboard Shortcuts ——&gt; 找到 Save All Files，将其命令设置为<code>command + s</code>即可</p>
<h3 id="4-设置缩进为2个空格"><a href="#4-设置缩进为2个空格" class="headerlink" title="4.设置缩进为2个空格"></a>4.设置缩进为2个空格</h3><p>Preferences ——&gt; Settings</p>
<p>——&gt; 找到 Tab Size，将值改为2</p>
<p>——&gt; 找到 Detect Indentation，将前边的复选框的勾选取消（配置全局文件为2个空格，不勾选则以前文件不变）</p>
<h3 id="5-关闭顶部固定区域"><a href="#5-关闭顶部固定区域" class="headerlink" title="5.关闭顶部固定区域"></a>5.关闭顶部固定区域</h3><p>vscode从某个版本开始，在滚动左侧目录树、编辑区代码时，会在顶部保留层级结构，其实不好用，需要将其关闭</p>
<p>Preferences ——&gt; Settings ——&gt; 搜索<code>sticky</code> ——&gt; 将其所有复选框均取消即可</p>
<h3 id="6-安装Extensions"><a href="#6-安装Extensions" class="headerlink" title="6.安装Extensions"></a>6.安装Extensions</h3><ul>
<li>GitLens</li>
<li>Vue - Official</li>
<li>Vue VSCode Snippets(Vue代码片段，方便快速生成代码，如<code>vbase</code>可直接生成<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;style&gt;</code>等)</li>
<li>CodeGeeX(AI代码助手)</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>wangEditor学习与使用</title>
    <url>/2023/09/01/wangEditor%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>继之前的<a href="/2023/01/11/CKEditor5%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/">CKEditor5学习开发之路</a>之后，这又是一篇对富文本编辑器的学习与使用的整理回顾笔记。之所以会再一次研究富文本编辑器，并且目标对象变了，主要是因为CKEditor5的License为<a href="https://github.com/ckeditor/ckeditor5/blob/master/LICENSE.md">GNU General Public License</a>，要求使用者也必须开源，因此只能重新调研，具体调研结果可查看<a href="/2023/09/01/%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E8%B0%83%E7%A0%94/">富文本编辑器调研</a>。</p>
<h2 id="二、技术选型"><a href="#二、技术选型" class="headerlink" title="二、技术选型"></a>二、技术选型</h2><p>从调研结果来看，除掉CKEditor5，还剩下TinyMCE、wangEditor、Froala Editor是可选的。</p>
<ul>
<li><p>TinyMCE</p>
<ol>
<li>先来说TinyMCE，它的内容区是嵌套了一个iframe，扩展插件的话是新建html、js，在这独立的html、js中写插件的逻辑，而这插件被集成到编辑器并使用的时候，又嵌套了一层iframe。如果要实现插入图表的功能，图表的插入使用肯定不止一个，这种方案似乎不太合适。</li>
<li>另外它的引用方式也挺奇怪的，默认地，代码会去他们的服务器请求tinymce.min.js，如果是内网环境，则需要单独配置，具体参考<a href="https://www.tiny.cloud/docs/tinymce/6/angular-pm/">这里</a>的步骤8。</li>
<li>基于这两点原因，最终放弃了它。这里是测试<a href="https://github.com/DoAutumn/TinyMCE-test">代码</a>。</li>
</ol>
</li>
<li><p>Froala Editor看起来是个不错的选择，但查看<a href="https://github.com/froala/angular-froala-wysiwyg/blob/master/package.json">代码</a>时，发现前端工程依赖的<code>&quot;froala-editor&quot;: &quot;^4.1.1&quot;</code>并没有公开代码仓，公开出来的是<a href="https://github.com/froala/wysiwyg-editor-release">V3版本</a>，其他的公开仓都是适配各种框架的，这。。。开源了个啥</p>
</li>
<li><p>wangEditor很明显也不是理想选择，正如调研结果中提到的，bug较多，但没办法，暂时没找到其他开源可商用的富文本编辑器。</p>
</li>
</ul>
<h2 id="三、wangEditor的使用与扩展"><a href="#三、wangEditor的使用与扩展" class="headerlink" title="三、wangEditor的使用与扩展"></a>三、wangEditor的使用与扩展</h2><p>不过wangEditor的优势也是比较明显的，帮助文档很详细，示例较多，源码结构也很清晰，弄清楚了它的代码逻辑，修复遇到的bug还是比较简单的。<br><img width="800" alt="架构图.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/wangEditor学习与使用/架构图.png"><br>这里就不再重复罗列自定义扩展新功能的步骤了，按照其<a href="https://www.wangeditor.com/v5/development.html">官网</a>教程一步步来即可。附上包含插入图表、占位符的示例<a href="https://github.com/DoAutumn/wangEditor-test">代码</a>。<br>只记录下对其bug修复、功能调整的技术细节。</p>
<h3 id="1、修复在Angular工程中编译报错的bug"><a href="#1、修复在Angular工程中编译报错的bug" class="headerlink" title="1、修复在Angular工程中编译报错的bug"></a>1、修复在Angular工程中编译报错的bug</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// packages/core/src/editor/interface.ts</span></span><br><span class="line"><span class="comment">// import ee from &#x27;event-emitter&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ee <span class="keyword">from</span> <span class="string">&#x27;event-emitter&#x27;</span>  <span class="comment">// @types/event-emitter中是这么写的：export = ee; 所以需要import * as ee from &#x27;event-emitter&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="2、修复不设置编辑器高度时，控制台有警告提示、hoverbar、modal位置不对的bug"><a href="#2、修复不设置编辑器高度时，控制台有警告提示、hoverbar、modal位置不对的bug" class="headerlink" title="2、修复不设置编辑器高度时，控制台有警告提示、hoverbar、modal位置不对的bug"></a>2、修复不设置编辑器高度时，控制台有警告提示、hoverbar、modal位置不对的bug</h3><p>扩展IEditorConfig，使之支持设置minHeight，然后在创建根节点时，设置最小高度</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// packages/core/src/config/interface.ts</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * editor config</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IEditorConfig</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  minHeight?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// packages/core/src/text-area/update-view.ts</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成编辑区域的 elem</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> elemId elemId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> readOnly readOnly</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">genRootElem</span>(<span class="params"><span class="attr">elemId</span>: <span class="built_in">string</span>, readOnly = <span class="literal">false</span>, minHeight = <span class="string">&#x27;&#x27;</span></span>): <span class="title class_">Dom7Array</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> style = minHeight ? <span class="string">`style=&quot;min-height: <span class="subst">$&#123;minHeight&#125;</span>;&quot;`</span> : <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> $elem = $(<span class="string">`&lt;div</span></span><br><span class="line"><span class="string">        id=&quot;<span class="subst">$&#123;elemId&#125;</span>&quot;</span></span><br><span class="line"><span class="string">        data-slate-editor</span></span><br><span class="line"><span class="string">        data-slate-node=&quot;value&quot;</span></span><br><span class="line"><span class="string">        suppressContentEditableWarning</span></span><br><span class="line"><span class="string">        role=&quot;textarea&quot;</span></span><br><span class="line"><span class="string">        spellCheck=&quot;true&quot;</span></span><br><span class="line"><span class="string">        autoCorrect=&quot;true&quot;</span></span><br><span class="line"><span class="string">        autoCapitalize=&quot;true&quot;</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;style&#125;</span></span></span><br><span class="line"><span class="string">    &gt;&lt;/div&gt;`</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// role=&quot;textarea&quot; - 增强语义，div 语义太弱</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> $elem</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、修复插入分隔线或自定义元素时，总是会在前面空出一行的bug"><a href="#3、修复插入分隔线或自定义元素时，总是会在前面空出一行的bug" class="headerlink" title="3、修复插入分隔线或自定义元素时，总是会在前面空出一行的bug"></a>3、修复插入分隔线或自定义元素时，总是会在前面空出一行的bug</h3><p>参考插入表格的代码，如果当前是空 p ，则删除该 p</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// packages/table-module/src/module/menu/InsertTable.ts</span></span><br><span class="line"><span class="comment">// 如果当前是空 p ，则删除该 p</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">DomEditor</span>.<span class="title function_">isSelectedEmptyParagraph</span>(editor)) &#123;</span><br><span class="line">  <span class="title class_">Transforms</span>.<span class="title function_">removeNodes</span>(editor, &#123; <span class="attr">mode</span>: <span class="string">&#x27;highest&#x27;</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4、修复给到编辑器的html中出现了字号列表中没有的字号时，字号不生效的bug"><a href="#4、修复给到编辑器的html中出现了字号列表中没有的字号时，字号不生效的bug" class="headerlink" title="4、修复给到编辑器的html中出现了字号列表中没有的字号时，字号不生效的bug"></a>4、修复给到编辑器的html中出现了字号列表中没有的字号时，字号不生效的bug</h3><p>移除在字号列表中查找当前字号的逻辑（字体也是一样的逻辑）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// packages/basic-modules/src/modules/font-size-family/parse-style-html.ts</span></span><br><span class="line"><span class="comment">// const includesSize =</span></span><br><span class="line"><span class="comment">//   fontSizeList.find(item =&gt; item.value &amp;&amp; item.value === fontSize) ||</span></span><br><span class="line"><span class="comment">//   fontSizeList.includes(fontSize)</span></span><br><span class="line"><span class="comment">// 在 fontSizeList 中找不到，也能够设置 fontSize</span></span><br><span class="line"><span class="keyword">const</span> includesSize = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fontSize &amp;&amp; includesSize) &#123;</span><br><span class="line">  textNode.<span class="property">fontSize</span> = fontSize</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5、调整表格创建成功之后宽度默认100"><a href="#5、调整表格创建成功之后宽度默认100" class="headerlink" title="5、调整表格创建成功之后宽度默认100%"></a>5、调整表格创建成功之后宽度默认100%</h3><p>获取表格节点时，将<code>width: &#39;auto&#39;</code>改为<code>width: &#39;100%&#39;</code>即可</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// packages/table-module/src/module/menu/InsertTable.ts</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">genTableNode</span>(<span class="params"><span class="attr">rowNum</span>: <span class="built_in">number</span>, <span class="attr">colNum</span>: <span class="built_in">number</span></span>): <span class="title class_">TableElement</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;table&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: rows,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6、扩展工具栏按钮BaseButton，使之支持调用menu的onButtonClick方法"><a href="#6、扩展工具栏按钮BaseButton，使之支持调用menu的onButtonClick方法" class="headerlink" title="6、扩展工具栏按钮BaseButton，使之支持调用menu的onButtonClick方法"></a>6、扩展工具栏按钮BaseButton，使之支持调用menu的onButtonClick方法</h3><p>有时候我们需要在点击工具栏按钮的时候，获取按钮的位置，以便靠近该按钮显示一个自定义浮窗，此时我们需要知道按钮相对编辑器的位置，以确定浮窗的位置。为此，我们扩展BaseButton，使之支持调用menu的onButtonClick方法（当然，前提是menu实现了onButtonClick方法），然后将event传递出来。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BaseButton本身已经有onButtonClick方法了，只是menu没有，所以对menu的接口IBaseMenu进行扩展</span></span><br><span class="line"><span class="comment">// packages/core/src/menus/interface.ts</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IBaseMenu</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  onButtonClick?: <span class="function">(<span class="params"><span class="attr">editor</span>: <span class="title class_">IDomEditor</span>, <span class="attr">e</span>: <span class="title class_">Event</span></span>) =&gt;</span> <span class="built_in">void</span> <span class="comment">// 和 exec 类似，但主要是为了得到原始 event</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// packages/core/src/menus/bar-item/BaseButton.ts</span></span><br><span class="line"><span class="comment">// // 交给子类去扩展</span></span><br><span class="line"><span class="comment">// abstract onButtonClick(): void</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行 menu.onButtonClick</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">onButtonClick</span>(<span class="params"><span class="attr">e</span>: <span class="title class_">Event</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> editor = <span class="title function_">getEditorInstance</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="keyword">const</span> menu = <span class="variable language_">this</span>.<span class="property">menu</span></span><br><span class="line">  menu.<span class="property">onButtonClick</span> &amp;&amp; menu.<span class="title function_">onButtonClick</span>(editor, e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：BaseButton的所有子类，均需在onButtonClick中调用父类的该方法</span></span><br><span class="line"><span class="title function_">onButtonClick</span>(<span class="params"><span class="attr">e</span>: <span class="title class_">Event</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">super</span>.<span class="title function_">onButtonClick</span>(e)</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7、扩展工具栏下拉选择Select，使之支持始终显示图标，而不是显示选中的文字"><a href="#7、扩展工具栏下拉选择Select，使之支持始终显示图标，而不是显示选中的文字" class="headerlink" title="7、扩展工具栏下拉选择Select，使之支持始终显示图标，而不是显示选中的文字"></a>7、扩展工具栏下拉选择Select，使之支持始终显示图标，而不是显示选中的文字</h3><p>比如行高，有些富文本编辑器始终显示图标（当然也不能说这样是最好，只是扩展以支持该功能）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// packages/core/src/menus/interface.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ISelectMenu</span> <span class="keyword">extends</span> <span class="title class_">IBaseMenu</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> alwaysShowIcon?: <span class="built_in">boolean</span> <span class="comment">// 永远显示图标</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// packages/core/src/menus/bar-item/Select.ts</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">setSelectedValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> editor = <span class="title function_">getEditorInstance</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="keyword">const</span> menu = <span class="variable language_">this</span>.<span class="property">menu</span></span><br><span class="line">  <span class="keyword">const</span> &#123; alwaysShowIcon, iconSvg &#125; = menu</span><br><span class="line">  <span class="keyword">const</span> value = menu.<span class="title function_">getValue</span>(editor)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = menu.<span class="title function_">getOptions</span>(editor)</span><br><span class="line">  <span class="keyword">const</span> optText = <span class="title function_">getOptionText</span>(options, value.<span class="title function_">toString</span>())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> $button = <span class="variable language_">this</span>.<span class="property">$button</span></span><br><span class="line">  <span class="keyword">const</span> $downArrow = <span class="title function_">gen$downArrow</span>() <span class="comment">// 向下的箭头图标</span></span><br><span class="line">  $button.<span class="title function_">empty</span>()</span><br><span class="line">  <span class="comment">// 主要是这里的代码</span></span><br><span class="line">  <span class="keyword">if</span> (alwaysShowIcon &amp;&amp; iconSvg) &#123;</span><br><span class="line">    <span class="keyword">const</span> $svg = $(iconSvg)</span><br><span class="line">    <span class="title function_">clearSvgStyle</span>($svg)</span><br><span class="line">    $button.<span class="title function_">append</span>($svg)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $button.<span class="title function_">text</span>(optText)</span><br><span class="line">  &#125;</span><br><span class="line">  $button.<span class="title function_">append</span>($downArrow)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="四、wangEditor私有化"><a href="#四、wangEditor私有化" class="headerlink" title="四、wangEditor私有化"></a>四、wangEditor私有化</h2><p>上面我们对其源码修改了这么多，最好是贡献给wangEditor，但存在几点障碍：</p>
<ul>
<li>作者已经在 2023-08-30 发布了 wangEditor 暂停维护的通知，具体看<a href="https://juejin.cn/post/7272735633458413602">这里</a></li>
<li>我们的修改不一定能够被他们接受（或许有些问题他们不认为是bug，或许有些扩展他们认为不通用）</li>
<li>加入其团队略微麻烦，具体要求在<a href="https://github.com/wangeditor-team/wangEditor/blob/master/docs/join.md">这里</a></li>
</ul>
<p>所以我们需要重新定义包名、指定代码仓、指定npm私服。<br>源码中是使用<a href="https://www.lernajs.cn/"><code>lerna</code></a>管理多个包的，因此<code>packages</code>目录下的每个包都需要改，主要修改<code>package.json</code>中的如下属性值：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;publishConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;registry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>需要注意一点，如果我们新的代码仓不是在GitHub上，那么在lerna将<code>git tag</code> <code>push</code>到远程时，就不会触发原有的配置<code>git action</code>，此时需要我们手动发包。<br>所以，调整之后的完整的开发、发包流程如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 下载代码到本地，进入 `wangEditor` 目录</span><br><span class="line">- 安装所有依赖 `yarn bootstrap`</span><br><span class="line">- 开发功能，完成之后将代码合并到 `master` 分支</span><br><span class="line">- 打包所有模块 `yarn dev` 或者 `yarn build`</span><br><span class="line">- 生成版本并利用 lerna 自动 push `yarn release:version`</span><br><span class="line">- 手动发包 `yarn release:publish`</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>富文本编辑器</category>
      </categories>
      <tags>
        <tag>富文本编辑器</tag>
        <tag>wangEditor</tag>
        <tag>TinyMCE</tag>
      </tags>
  </entry>
  <entry>
    <title>一文彻底看懂package.json中的各种dependencies</title>
    <url>/2022/08/31/%E4%B8%80%E6%96%87%E5%BD%BB%E5%BA%95%E7%9C%8B%E6%87%82package-json%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8Ddependencies/</url>
    <content><![CDATA[<p>关于package.json中的各种dependencies的详细解释，可以直接参考<a href="https://developer.aliyun.com/article/1051418">这篇文章</a>。</p>
<p>这里只做一个最终结论的摘录。</p>
<table>
<thead>
<tr>
<th>依赖类型</th>
<th>定义在项目中</th>
<th>定义在依赖中</th>
<th>一句话总结</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>dependencies</td>
<td>会被安装</td>
<td>会被安装</td>
<td>定义包运行所需要的依赖包</td>
<td>某前端项目使用 react 进行开发，需要将 react 添加到 dependencies 中</td>
</tr>
<tr>
<td>devDependencies</td>
<td>会被安装</td>
<td>不会被安装</td>
<td>定义包在开发时所需要的依赖包</td>
<td>antd 使用了 @testing-library&#x2F;react 进行测试，需要将 @testing-library&#x2F;react 添加到 devDependencies 中</td>
</tr>
<tr>
<td>peerDependencies</td>
<td>不会被安装</td>
<td>不会被安装，但是如果指向的依赖没有被安装或不符合时会有警告（peerDependenciesMeta 会影响该行为）</td>
<td>定义该包运行所需要的依赖环境，一般和 devDependencies 一起使用</td>
<td>antd 是一个 react 组件库，为了不和使用它的项目中的 react 版本定义造成冲突，需要将支持的 react 版本添加到 peerDependencies 中</td>
</tr>
<tr>
<td>optionalDependencies</td>
<td>会被安装，但是安装报错不会影响</td>
<td>会被安装，但是安装报错不会影响</td>
<td>optionalDependencies 用于定义对包运行不会造成影响的依赖包</td>
<td>一个包在使用 A 包进行了某些操作，但是如果 A 包不在的话，可以使用别的 API 达到同样的效果，可以将 A 包添加到 optionalDependencies 中</td>
</tr>
</tbody></table>
<hr>
<p>另外记录下版本号的格式规定：<br><code>固定版本</code>：如4.0.3<br><code>～</code>：如～4.0.3，表示安装 4.0.x 的最新版本，也就是说安装时不会改变主版本号和次版本号<br><code>^</code>：如^17.0.2，表示安装 17.x.x 的最新版本，也就是说安装时不会改变主版本号<br><code>latest</code>：安装最新版本</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>一种基于Angular的半插件式的功能扩展方案</title>
    <url>/2023/03/03/%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8EAngular%E7%9A%84%E5%8D%8A%E6%8F%92%E4%BB%B6%E5%BC%8F%E7%9A%84%E5%8A%9F%E8%83%BD%E6%89%A9%E5%B1%95%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为什么说是半插件式的呢？因为它并不像<code>比如Chrome浏览器安装扩展程序</code>那样，可以在线安装。但是它又基本上能够达到插件的效果，也即如果附带了某个功能模块，则该功能可以正常使用，如果不带对整个产品也没有任何影响，所以就叫它半插件式吧。</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我们产线在产品化的过程中，对前端基础框架提出了这样一个要求，需要提供一个基础版本、一个扩展版本，扩展版本包含一些额外的功能，比如不想开放给其他产线的高级功能。其实像这种功能模块的授权控制，一般都会采用License（<a href="https://juejin.cn/post/7140328102709690398">软件离线许可License实现原理</a>、<a href="https://blog.csdn.net/chengpei147/article/details/116259117">软件License设计思路与实现方案</a>）的设计方案，比如CleanMyMac，免费版只能使用有限的功能，购买之后才能解锁全部功能。</p>
<p>但是我们想要实现的目标和License授权控制还是有些差别的，具体表现为：</p>
<ul>
<li>我们的高级功能始终不会对外提供，也就意味着我们不想在打包之后的代码里能够看到关于高级功能的任何代码</li>
<li>我们需要提供两个开发包，一个对内，一个对外，不能让其他产线知道我们有内部开发包</li>
</ul>
<h2 id="方案预选"><a href="#方案预选" class="headerlink" title="方案预选"></a>方案预选</h2><p>按照以往偷懒式的开发习惯，一般会有两种解决方案：</p>
<p>方案一：通过配置属性控制<br>缺点：</p>
<ul>
<li>需要人为干预，每次发版都需要人为的修改属性值，基础版改为这个值，扩展版改为那个值。。。</li>
<li>功能的隐蔽性不够好，一旦别人知道了这个配置属性，意味着对应的功能直接就暴露出去了，而且高级功能的代码肯定也都打进包里了</li>
<li>代码的可维护性不够好，引入的控制变量可能会越来越多，有控制这个功能的，有控制那个功能的。。。</li>
<li>不具备可扩展性，如果想再增加一个功能，只能修改现有代码</li>
</ul>
<p>方案二：开启两个代码分支<br>缺点：</p>
<ul>
<li>通用功能的代码同步将会比较麻烦</li>
</ul>
<p>显然这两种方案都不能够令人满意，好在前期有微前端开发经验的积累，很快想到了第三种方案：<br><code>在启动AppModule时将所需功能模块注入到应用程序中，动态设置路由、创建组件</code></p>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>关于Angular的依赖注入，可以参考这里：<a href="https://www.jianshu.com/p/4b10948d456c">Angular依赖注入介绍</a>、<a href="https://www.jianshu.com/p/49bbd4a0c16b">Angular依赖注入教程</a></p>
<h3 id="1-不同的模块，如何保证能够统一的解析加载运行？"><a href="#1-不同的模块，如何保证能够统一的解析加载运行？" class="headerlink" title="1.不同的模块，如何保证能够统一的解析加载运行？"></a>1.不同的模块，如何保证能够统一的解析加载运行？</h3><p>为了保证应用程序在动态加载扩展功能模块时能够有统一的处理逻辑，抽象出一个扩展类<code>Advanced</code>，包含该模块的路由路径path、模块名称label、默认显示到界面的组件component、其他信息，所有模块都继承<code>Advanced</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export abstract class Advanced &#123;</span><br><span class="line">  static component: any;</span><br><span class="line">  static path: string;</span><br><span class="line">  static label: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    Demo3Component,</span><br><span class="line">    IconComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    CommonModule,</span><br><span class="line">    RouterModule.forChild([&#123; path: &#x27;&#x27;, component: Demo3Component &#125;])</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">export class Demo3Module extends Advanced &#123; &#125;</span><br><span class="line"></span><br><span class="line">Demo3Module.component = IconComponent;</span><br><span class="line">Demo3Module.path = &#x27;demo3&#x27;;</span><br><span class="line">Demo3Module.label = &#x27;消息中心&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="2-有了Module，如何注入给应用程序？注入之后通过什么获取到注入的Module？"><a href="#2-有了Module，如何注入给应用程序？注入之后通过什么获取到注入的Module？" class="headerlink" title="2.有了Module，如何注入给应用程序？注入之后通过什么获取到注入的Module？"></a>2.有了Module，如何注入给应用程序？注入之后通过什么获取到注入的Module？</h3><p>自定义一个依赖注入令牌<code>AdvancedToken</code>，用于注入、获取Module</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export const AdvancedToken: InjectionToken&lt;Advanced&gt; = new InjectionToken(&#x27;AdvancedToken&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="3-代码如何实现？"><a href="#3-代码如何实现？" class="headerlink" title="3.代码如何实现？"></a>3.代码如何实现？</h3><p>注入代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const list = [</span><br><span class="line">  &#123; provide: AdvancedToken, useValue: Demo3Module &#125;  // 当然这里可以注入多个</span><br><span class="line">];</span><br><span class="line">if (environment.version === &#x27;basic&#x27;) list.length = 0;</span><br><span class="line"></span><br><span class="line">platformBrowserDynamic(list)</span><br><span class="line">  .bootstrapModule(AppModule)</span><br><span class="line">  .catch(err =&gt; console.error(err));</span><br></pre></td></tr></table></figure>
<p>获取代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 在基础版里，如果获取不到注入的module，则直接return，也就意味着基础版里没有扩展的功能模块</span><br><span class="line">try &#123; module = this.injector.get(AdvancedToken) &#125; catch (error) &#123; &#125;;  // 如果上面注入的是多个，则这里获取到的是一个集合</span><br><span class="line">if (!module) return;</span><br></pre></td></tr></table></figure>

<h3 id="4-代码如何抽离？"><a href="#4-代码如何抽离？" class="headerlink" title="4.代码如何抽离？"></a>4.代码如何抽离？</h3><p>通过上述3步，其实Demo3Module的代码还是被打进了基础版的最终代码里，也就是说，虽然<code>if (environment.version === &#39;basic&#39;) list.length = 0;</code>这行代码把集合置空了，但那是执行态的事，打包时并没有识别，因此Demo3Module也就被包含进去了。</p>
<p>既然这样，那我们可以参考<code>environment.ts</code>的形式新增一个<code>main.basic.ts</code>，在打包时动态替换掉<code>main.ts</code>即可，具体步骤包括：<br>1、新增main.basic.ts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">platformBrowserDynamic().bootstrapModule(AppModule)  // 不包含任何注入的Module</span><br><span class="line">  .catch(err =&gt; console.error(err));</span><br></pre></td></tr></table></figure>

<p>2、tsconfig.app.json中添加main.basic.ts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;files&quot;: [</span><br><span class="line">    &quot;src/main.ts&quot;,</span><br><span class="line">    &quot;src/main.basic.ts&quot;,</span><br><span class="line">    &quot;src/polyfills.ts&quot;</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、angular.json中配置basic打包参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;basic&quot;: &#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;fileReplacements&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;replace&quot;: &quot;src/main.ts&quot;,</span><br><span class="line">      &quot;with&quot;: &quot;src/main.basic.ts&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、package.json中配置basic打包命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build&quot;: &quot;ng build&quot;,</span><br><span class="line">  &quot;build:basic&quot;: &quot;ng build --configuration=basic&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h2><p><a href="https://github.com/DoAutumn/like-plugin">https://github.com/DoAutumn/like-plugin</a></p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular插件</tag>
        <tag>License</tag>
      </tags>
  </entry>
  <entry>
    <title>产品版本规则</title>
    <url>/2022/07/17/%E4%BA%A7%E5%93%81%E7%89%88%E6%9C%AC%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<ul>
<li><p>alpha：内测版<br>软件的初级版本，表示该软件在此阶段以实现软件功能为主，通常只在软件开发者内部交流，一般而言，该版本软件的Bug较多，需要继续修改，是测试版本。测试人员提交Bug经开发人员修改确认之后，发布到测试网址让测试人员测试，此时可将软件版本标注为alpha版。 </p>
</li>
<li><p>beta：公测版<br>该版本相对于alpha版已经有了很大的进步，消除了严重错误，但还需要经过多次测试来进一步消除，此版本主要的修改对象是软件的UI。修改的Bug经测试人员测试确认后可发布到外网上，此时可将软件版本标注为beta版。 </p>
</li>
<li><p>demo：演示版<br>在非正式版软件中，该版本的知名度最大。demo版仅仅集成了正式版中的几个功能，颇有点像unregistered。不同的是，demo版一般不能通过升级或注册的方法变为正式版。 </p>
</li>
<li><p>rc：即将作为正式版发布<br>该版本已经相当成熟了，基本上不存在导致错误的Bug，与即将发行的正式版本相差无几。 </p>
</li>
<li><p>release：发行版<br>该版本意味“最终版本”，在前面版本的一系列测试版之后，终归会有一个正式的版本，是最终交付用户使用的一个版本。该版本有时也称标准版。 </p>
</li>
<li><p>express：快速版<br>相比于标准版、企业版，在功能上提供的较少或者是增减一些定制性的功能。 </p>
</li>
<li><p>standard：标准版<br>这是最常见的标准版，不论是什么软件，标准版一定存在。标准版中包含了该软件的基本组件及一些常用功能，可以满足一般用户的需求。其价格相对高一级版本而言还是“平易近人”的。 </p>
</li>
<li><p>enterprise（企业版）<br>企业版是开发类软件中的极品（相当于百科全书中的reference版）。拥有一套这种版本的软件可以毫无障碍地开发任何级别的应用软件。如著名的visual c++的企业版相对于专业版来说增加了几个附加的特性，如sql调试、扩展的存储过程向导、支持as&#x2F;400对ole db的访问等。而这一版本的价格也是普通用户无法接受的。如微软的visual studios 6.0 enterprise 中文版的价格为 23000 元。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>产品版本递增规范及代码分支管理要求</title>
    <url>/2023/01/05/%E4%BA%A7%E5%93%81%E7%89%88%E6%9C%AC%E9%80%92%E5%A2%9E%E8%A7%84%E8%8C%83%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E8%A6%81%E6%B1%82/</url>
    <content><![CDATA[<p>到目前为止，关于数字货币交易平台的项目总共有3个，分别是前台页面项目、后端接口和后台管理的项目、撮合服务项目。后续可能还会有更多的项目要进行维护。 </p>
<h2 id="1-代码版本递增规范"><a href="#1-代码版本递增规范" class="headerlink" title="1. 代码版本递增规范"></a>1. 代码版本递增规范</h2><p>现在对这些项目的版本号进行规范管理，每次项目版本号的迭代，都需要管理人员统一商定，并严格按照以下要求来制定版本号。 </p>
<p>版本格式：<code>v + 主版本号.次版本号.修订号</code>，比如 v1.0.1，<code>注意v小写</code>。版本号中的数字最多不能超过3位。版本号递增规则如下： </p>
<ol>
<li><p>主版本号：当做了不兼容的 API 修改，或者重大架构更新时。 </p>
</li>
<li><p>次版本号：当做了向下兼容的功能性新增、更新时。 </p>
</li>
<li><p>修订号：当做了向下兼容的bug修复时。</p>
</li>
</ol>
<h2 id="2-代码分支管理要求"><a href="#2-代码分支管理要求" class="headerlink" title="2. 代码分支管理要求"></a>2. 代码分支管理要求</h2><p>鉴于之前的代码合并过程中，发生了部分未完成的代码被合并到开发分支的情况，导致了代码无法进行快速拆分和版本标记，所以以后要求所有开发人员及管理人员必须严格遵照Git Flow来做代码分支的管理。 </p>
<p>以下关于本团队代码分支管理要求的内容，均参照于这里关于Git Flow的描述：<a href="https://drprincess.github.io/2017/12/26/Git%E4%B8%89%E5%A4%A7%E7%89%B9%E8%89%B2%E4%B9%8BWorkFlow(%E5%B7%A5%E4%BD%9C%E6%B5%81)/">Git三大特色之WorkFlow(工作流) </a></p>
<h3 id="2-1-长期分支"><a href="#2-1-长期分支" class="headerlink" title="2.1 长期分支"></a>2.1 长期分支</h3><p>一个项目中，要保证2个长期存在的分支，分别为master和develop分支。这2个分支均设为<code>保护分支</code>（只有项目中的Master角色才能允许其他分支的代码被合并到此分支上）。master分支主要用于标记版本号（即添加Tag）。develop分支用于日常的开发内容合并。develop是master下的分支。 </p>
<h3 id="2-2-辅助分支"><a href="#2-2-辅助分支" class="headerlink" title="2.2 辅助分支"></a>2.2 辅助分支</h3><p>除了2个长期存在的分支外，还要有3类辅助分支，辅助分支在被合并后可以删除。分别为<code>Feature Branch、Release Branch 和 Hotfix Branch</code>。 </p>
<h4 id="2-2-1-Feature-Branch"><a href="#2-2-1-Feature-Branch" class="headerlink" title="2.2.1 Feature Branch"></a>2.2.1 Feature Branch</h4><p>feature分支用来做<code>一个模块/功能开发或更新</code>，分支命名要求：<code>feature/&#123;功能模块简称标识&#125;</code>，不要和其他类型的分支命名弄混淆就好，举个坏例子，命名为 master 就是一个非常不妥当的举动。 </p>
<p>该分支上的功能完成后，申请合并到 develop 分支，并选择被合并后删除该分支。 </p>
<p>如果一个功能模块只有一个开发人员来进行，那么该开发人员可以在该feature分支上直接进行开发。 </p>
<p>如果一个功能模块由多个开发人员来进行，那么为了避免代码冲突和覆盖，每个开发人员需要在该feature分支上检出各自的分支，命名要求：<code>feature/&#123;功能模块简称标识&#125;/&#123;开发人员姓名全拼&#125;</code>，开发完毕后将各自分支上的代码合并到feature分支上。 </p>
<h4 id="2-2-2-Release-Branch"><a href="#2-2-2-Release-Branch" class="headerlink" title="2.2.2 Release Branch"></a>2.2.2 Release Branch</h4><p>release分支用来做<code>版本发布的预发布分支</code>，分支命名要求：<code>release/&#123;预发布的版本号&#125;</code>。例如在软件 v1.0 版本的功能全部开发完成，并且已经被合并到develop分支后，那么从develop分支检出release&#x2F;v1.0分支，将release&#x2F;v1.0分支上的代码部署到测试服务环境中。测试过程中出现的问题，可在该release分支上进行修改提交。涉及多个开发人员的话，需要在该release分支上检出各自的分支进行修改，命名要求：<code>release/v1.0/&#123;开发人员姓名全拼&#125;</code>。 </p>
<p>测试完毕准备发布的时候，将该release分支上的代码分别合并到 master 和 develop分支，合并到master 分支后要打上对应版本标签 v1.0，同时写明功能模块新增&#x2F;更新的详细描述。记住，待合并到master和develop分支之后，删除该release分支。 </p>
<p>release分支的好处是，在测试的时候，不影响下一个版本功能的并行开发。 </p>
<h4 id="2-2-3-Hotfix-Branch"><a href="#2-2-3-Hotfix-Branch" class="headerlink" title="2.2.3 Hotfix Branch"></a>2.2.3 Hotfix Branch</h4><p>hotfix分支是用来做<code>线上的紧急 bug 修复的分支</code>，命名要求：<code>hotfix/&#123;bug简称标识&#125;</code>。当线上代码出现了问题，从master分支直接检出hotfix分支，然后在该hotfix上修复bug。涉及多个开发人员的话，需要在该hotfix分支上检出各自的分支进行修改，命名要求：<code>hotfix/&#123;bug简称标识&#125;/&#123;开发人员姓名全拼&#125;</code>。 </p>
<p>待问题修复后，将hotfix分支中的代码合并到 master 和 develop 分支，全部合并完成后删除该hotfix分支。注意，合并到 master 分支的时候，要打上修复后的版本标签，比如从v1.0 -&gt; v1.0.1，同时要写明修复bug的详细描述。 </p>
<h3 id="2-3-Git-Flow示意图"><a href="#2-3-Git-Flow示意图" class="headerlink" title="2.3 Git Flow示意图"></a>2.3 Git Flow示意图</h3><p>上述关于长期分支和辅助分支之间的工作切换流程，可以总结为下面的一张图。<br><img alt="Git Flow.jpg" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/产品版本递增规范及代码分支管理要求/Git Flow.jpg"></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>pm2:以后台服务的形式启动nodejs脚本</title>
    <url>/2023/03/27/%E4%BB%A5%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%90%AF%E5%8A%A8nodejs%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>我们都知道，当我们以<code>node server.js</code>执行<code>server.js</code>服务脚本时，如果<code>ctrl + c</code>结束该进程，则对应的服务也就停止了，那如何以后台服务的形式执行该脚本呢？</p>
<h3 id="方法一-利用-forever"><a href="#方法一-利用-forever" class="headerlink" title="方法一 利用 forever"></a>方法一 利用 forever</h3><p><a href="https://www.npmjs.com/package/forever">forever</a></p>
<h3 id="方法二-利用-pm2"><a href="#方法二-利用-pm2" class="headerlink" title="方法二 利用 pm2"></a>方法二 利用 pm2</h3><p><a href="https://www.npmjs.com/package/pm2">pm2</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br><span class="line">pm2 start server.js   // 启动</span><br><span class="line">pm2 stop server.js    // 停止</span><br><span class="line">pm2 list              // 列出所有服务，包括运行的和停止的</span><br><span class="line">pm2 delete server.js  // 删除该服务</span><br></pre></td></tr></table></figure>
<h3 id="方法三-利用nodejs自带服务nohub，不需要安装别的包"><a href="#方法三-利用nodejs自带服务nohub，不需要安装别的包" class="headerlink" title="方法三 利用nodejs自带服务nohub，不需要安装别的包"></a>方法三 利用nodejs自带服务nohub，不需要安装别的包</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup node server.js &amp;</span><br><span class="line">// 存在无法查询日志等问题，关闭终端后服务也就关闭了</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title>仿MacOS的后台管理系统</title>
    <url>/2023/01/13/%E4%BB%BFMacOS%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前比较流行的开源后台管理系统<a href="https://ng-alain.com/en">NG-ALAIN</a>、<a href="https://pro.ant.design/">Ant Design Pro</a>、<a href="https://panjiachen.github.io/vue-element-admin-site/zh/">Vue-Element-Admin</a>、<a href="http://boot.jeecg.com/">Jeecg Boot</a>等，其页面布局基本都是如下形式：<br><img width="500" alt="常见布局.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/仿MacOS的后台管理系统/常见布局.png"><br>诚然，这种形式并非不好，但看的多了，难免视觉疲劳。</p>
<p>其实导航、菜单、Tab的设计，无非是为了用户能够更快捷的进入某个特性模块，而特性模块大多是相对独立的，如用户管理、资产管理、系统设置，可以近似看作是一个个独立的App。如果按照这个角度继续思考，那我们为什么不能参考操作系统的布局、交互，设计我们的系统、页面呢？而提到操作系统，MacOS无疑是翘楚之作，于是一款仿MacOS的后台管理系统的前端解决方案便应运而生了，暂且给它起个WebOS的名字吧。</p>
<p>体验地址：<a href="https://doautumn.github.io/web-os">https://doautumn.github.io/web-os</a></p>
<blockquote>
<p>该解决方案并未投入实战，只是用作学习与交流，欢迎感兴趣的小伙伴留言支持。</p>
</blockquote>
<h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><p>技术栈：Angular13 + NG-ZORRO13</p>
<h3 id="1-基本布局"><a href="#1-基本布局" class="headerlink" title="1.基本布局"></a>1.基本布局</h3><p>基本布局部分比较简单，顶部MenuBar、中间Content、底部Dock。<br><img width="500" alt="MacOS布局.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/仿MacOS的后台管理系统/MacOS布局.png"></p>
<h3 id="2-Window"><a href="#2-Window" class="headerlink" title="2.Window"></a>2.Window</h3><p>不管是MacOS还是Windows，都是以窗口来呈现应用程序内容的，用户也都习以为常。那如果在Web端也采用这种形式，效果将会如何呢？目前我也没有答案。不过我是持乐观态度的，而且我还为WebOS设计了一种<code>键盘独占</code>的交互模式（这将在下文讲到），我相信在这种模式的加持下，用户的满意度应该是比较高的。</p>
<p>下面来聊一聊Window的具体实现方案。</p>
<h4 id="2-1-公开的属性、事件"><a href="#2-1-公开的属性、事件" class="headerlink" title="2.1 公开的属性、事件"></a>2.1 公开的属性、事件</h4><p>在做这种开发套件时，我一般首先考虑的是开发人员该如何使用我们提供的基础组件、服务。对于一个窗口而言，首先想到的需要开发人员干预的只有两项内容：<code>title和content</code>。进一步思考，当窗口处于非活动或最小化状态时，我们希望开发人员能够关注下性能，毕竟如果窗口打开过多，如何保证页面不卡顿将会是一件非常有必要的事情。为此我们需要提供两个状态切换事件：<code>active和inactive</code>，当窗口处于上述某种状态时，可以考虑暂停定时器、暂停持续的渲染动画等非必要的性能开销。对开发人员公开的内容除上述4项之外，还会有一些其他细节项，如<code>minimizable（是否能够最小化）、maximizable（是否能够最大化）、style（默认位置尺寸）</code>等。</p>
<p>使用Window的伪代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mz-window mzTitle=&quot;这是一个标题&quot; (active)=&quot;handleActive()&quot; (inactive)=&quot;handleInactive()&quot;&gt;</span><br><span class="line">  your code</span><br><span class="line">  ...</span><br><span class="line">&lt;/mz-window&gt;</span><br></pre></td></tr></table></figure>
<p>内部实现的伪代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// window.component.ts</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;mz-window&#x27;,</span><br><span class="line">  templateUrl: &#x27;./window.component.html&#x27;,</span><br><span class="line">  styleUrls: [&#x27;./window.component.less&#x27;]</span><br><span class="line">&#125;)</span><br><span class="line">export class WindowComponent implements OnInit, OnDestroy &#123;</span><br><span class="line"></span><br><span class="line">  @Input() mzTitle: string;</span><br><span class="line">  @Input() minimizable: boolean = true;</span><br><span class="line">  @Input() maximizable: boolean = true;</span><br><span class="line">  @Input() style: any;</span><br><span class="line"></span><br><span class="line">  @Output() active = new EventEmitter();</span><br><span class="line">  @Output() inactive = new EventEmitter();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// window.component.html</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;window&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123; mzTitle &#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;ng-content&gt;&lt;/ng-content&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-窗口的通用逻辑"><a href="#2-2-窗口的通用逻辑" class="headerlink" title="2.2 窗口的通用逻辑"></a>2.2 窗口的通用逻辑</h4><p>对于窗口的打开、关闭、最大化、最小化、拖拽、窗口切换等通用逻辑，都由框架统一实现即可。</p>
<p><strong>窗口与路由的关系</strong></p>
<p>而在实现上述功能之前，有一个关键问题需要解决。我们都知道，在基于Angular、Vue、React框架的前端工程中，开发一个中大型的后台管理系统，路由是不可或缺的基础功能。但正如前言中提到的，常见的开源后台管理系统，其主视区只显示当前路由对应的内容，如果我们在主视区想要显示多个窗口，是否意味着将不能再使用路由来组织我们的窗口？好在基于以往的开发经验，答案是否定的。在Angular、Vue中分别有对应的<a href="https://angular.cn/api/router/RouteReuseStrategy">路由复用策略</a>与<a href="https://cn.vuejs.org/guide/built-ins/keep-alive.html#keepalive">keep-alive</a>可以实现页面缓存（React貌似没有，好多年没用过了），我们可以借助此技术实现多个窗口的同时呈现。</p>
<p>具体来讲，我们需要将路由和Window进行关联，也即一个Window对应一个路由（Window在初始化之后会暂存其对应的路由URL），同时开启路由复用，当切换路由时，将缓存的路由快照对应的视图层插入到主视区即可。<br><img width="800" alt="路由复用与多窗口.jpg" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/仿MacOS的后台管理系统/路由复用与多窗口.jpg"><br><img width="800" alt="路由复用与多窗口.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/仿MacOS的后台管理系统/路由复用与多窗口.png"></p>
<p><strong>非活动状态窗口的激活</strong></p>
<p>我们知道，在操作系统中点击非活动状态窗口的任意位置，都能使其处于活动状态，且不触发其内部逻辑，如下所示，点击<code>Wiki</code>并不会直接进入Wiki页面，而只是将浏览器前置使其处于活动状态。<br><img width="650" alt="窗口激活.gif" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/仿MacOS的后台管理系统/窗口激活.gif"><br>为了实现该效果，当窗口处于非活动状态时，给其设置一个透明遮罩层，点击窗口其实是点击的是遮罩层，触发的动作也仅仅只是路由的跳转，这也算是一个取巧的方案吧。</p>
<p><strong>窗口的最小化</strong></p>
<p>目前我们还没有实现MacOS最小化窗口的神奇动画效果的技术方案，暂且实现了缩放的动画效果，和MacOS类似，窗口缩放之后会以缩略图的形式暂存到Dock中。那如何生成窗口的缩略图呢？或者是否可以将窗口直接缩放至Dock中？经过综合考虑，我们希望窗口和Dock尽量是解耦的，所以还是采用了生成缩略图的方案，因为Dock本身也是支持设置图标的，这样只需创建一个Dock对象并将缩略图、窗口标题带上即可。<br><code>new DockItem().init(&#123; name: title, iconPath: image, path: routePath &#125;)</code></p>
<p>至于缩略图的生成，则是使用了<code>html2canvas</code>。<br><img width="650" alt="窗口最小化.gif" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/仿MacOS的后台管理系统/窗口最小化.gif"></p>
<h3 id="3-Dock"><a href="#3-Dock" class="headerlink" title="3.Dock"></a>3.Dock</h3><p>Dock的实现，有两个问题需要解决，一是单个应用程序图标（这里我们称之为DockItem吧）和Window的关联，二是丝滑的动画效果。</p>
<p>关于DockItem和Window的关联，其实比较简单，上文已提到，Window和路由是一一对应的，那只需将DockItem和路由也做关联即可。只不过DockItem和路由并非一一对应，而是一个DockItem对应一个一级路由，包含若干个子路由。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 定义DockItem</span><br><span class="line">&#123;</span><br><span class="line">  &quot;apps&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;VSCode&quot;,</span><br><span class="line">      &quot;iconPath&quot;: &quot;./assets/app-icons/vscode.svg&quot;,</span><br><span class="line">      &quot;path&quot;: &quot;demo1&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Webstorm&quot;,</span><br><span class="line">      &quot;iconPath&quot;: &quot;./assets/app-icons/webstorm.svg&quot;,</span><br><span class="line">      &quot;path&quot;: &quot;demo2&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Chrome&quot;,</span><br><span class="line">      &quot;iconPath&quot;: &quot;./assets/app-icons/chrome.svg&quot;,</span><br><span class="line">      &quot;path&quot;: &quot;demo3&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 一级路由</span><br><span class="line">const routes: Routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;&#x27;,</span><br><span class="line">    component: WebOSLayoutComponent,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#x27;demo1&#x27;,</span><br><span class="line">        loadChildren: () =&gt; import(&#x27;./views/demo1/demo1.module&#x27;).then(m =&gt; m.Demo1Module)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#x27;demo2&#x27;,</span><br><span class="line">        loadChildren: () =&gt; import(&#x27;./views/demo2/demo2.module&#x27;).then(m =&gt; m.Demo2Module)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#x27;demo3&#x27;,</span><br><span class="line">        loadChildren: () =&gt; import(&#x27;./views/demo3/demo3.module&#x27;).then(m =&gt; m.Demo3Module)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>对于Dock丝滑的放大效果，这里实现的并不足够细致，就不详细阐述了，无非是动画处理scale、margin等样式，感兴趣的可以查看源码。<br><img width="650" alt="Dock.gif" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/仿MacOS的后台管理系统/Dock.gif"><br>另外，推荐下<a href="https://juejin.cn/post/6942325271349592100">Steven</a>实现的效果，很丝滑。</p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>计划将其作为基础开发包发布到npm，但由于还有一些功能暂未完成，如<code>键盘独占</code>、<code>国际化</code>等，故还需等待时日。</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>WebOS</tag>
        <tag>后台管理系统</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Nexus托管npm私有仓库</title>
    <url>/2022/09/11/%E4%BD%BF%E7%94%A8Nexus%E6%89%98%E7%AE%A1npm%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h2 id="1-安装Nexus"><a href="#1-安装Nexus" class="headerlink" title="1.安装Nexus"></a>1.安装Nexus</h2><h3 id="1-1-前置条件"><a href="#1-1-前置条件" class="headerlink" title="1.1.前置条件"></a>1.1.前置条件</h3><p>nexus需要运行在jdk1.8及以上环境</p>
<h3 id="1-2-下载"><a href="#1-2-下载" class="headerlink" title="1.2.下载"></a>1.2.下载</h3><p>链接：<a href="https://pan.baidu.com/s/1r5x6flbkiTgI0MiJVrvq4Q">https://pan.baidu.com/s/1r5x6flbkiTgI0MiJVrvq4Q</a>，提取码：hsnr</p>
<h3 id="1-3-安装"><a href="#1-3-安装" class="headerlink" title="1.3.安装"></a>1.3.安装</h3><p>直接解压即可，解压后会有两个目录：</p>
<ul>
<li>nexus-3.18.1-01：nexus私服管理界面的容器，内部集成了jetty</li>
<li>sonatype-work：私服的默认仓库，用于存储索引和组件资源</li>
</ul>
<h3 id="1-4-启动"><a href="#1-4-启动" class="headerlink" title="1.4.启动"></a>1.4.启动</h3><p>进入nexus-3.18.1-01&#x2F;bin&#x2F;目录，<code>./nexus run</code></p>
<h3 id="1-5-访问"><a href="#1-5-访问" class="headerlink" title="1.5.访问"></a>1.5.访问</h3><p>浏览器输入<a href="http://ip:8081/">http://ip:8081</a></p>
<h3 id="1-6-登录"><a href="#1-6-登录" class="headerlink" title="1.6.登录"></a>1.6.登录</h3><p>默认用户名admin，会提示默认密码在安装包的什么位置<br><em>windows虚拟机上的密码改为了Talent123</em></p>
<h3 id="1-7-Create-repository"><a href="#1-7-Create-repository" class="headerlink" title="1.7.Create repository"></a>1.7.Create repository</h3><p><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/%E4%BD%BF%E7%94%A8Nexus%E6%89%98%E7%AE%A1npm%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/%E5%88%9B%E5%BB%BA%E4%BB%93.jpg" alt="创建仓.jpg"><br>其中，npm（hosted）可设置包的发布策略，是否允许重新发布，如果不允许重新发布，则每次发布包，均需升级版本号<br><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/%E4%BD%BF%E7%94%A8Nexus%E6%89%98%E7%AE%A1npm%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/%E6%98%AF%E5%90%A6%E5%85%81%E8%AE%B8%E9%87%8D%E6%96%B0%E5%8F%91%E5%B8%83.jpg" alt="是否允许重新发布.jpg"></p>
<h2 id="2-CentOS7下将Nexus设置为系统服务"><a href="#2-CentOS7下将Nexus设置为系统服务" class="headerlink" title="2.CentOS7下将Nexus设置为系统服务"></a>2.CentOS7下将Nexus设置为系统服务</h2><h3 id="2-1-修改nexus启动脚本"><a href="#2-1-修改nexus启动脚本" class="headerlink" title="2.1.修改nexus启动脚本"></a>2.1.修改nexus启动脚本</h3><p>修改脚本第14行：<code>INSTALL4J_JAVA_HOME_OVERRIDE=/root/jdk_1.8.0_231  // jdk安装路径</code><br>否则，可能会出现以下错误：<br><img width="460" alt="可能出现的错误.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/使用Nexus托管npm私有仓库/可能出现的错误.png"></p>
<h3 id="2-2-配置系统服务"><a href="#2-2-配置系统服务" class="headerlink" title="2.2.配置系统服务"></a>2.2.配置系统服务</h3><p>设置软连接：<br><code>sudo ln -s /opt/nexus-3.18.1-01/bin/nexus /etc/init.d/nexus</code></p>
<p>采用systemd的方式配置服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/systemd/system</span><br><span class="line">vi nexus.service</span><br><span class="line"></span><br><span class="line">在nexus.service文件中添加以下内容：</span><br><span class="line">[Unit]</span><br><span class="line">Description=nexus service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/opt/nexus-3.18.1-01/bin/nexus start  #nexus的安装目录</span><br><span class="line">ExecStop=/opt/nexus-3.18.1-01/bin/nexus stop</span><br><span class="line">User=root  #系统用户名</span><br><span class="line">Restart=on-abort</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>分别执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload #重新加载服务</span><br><span class="line">sudo systemctl enable nexus.service #开启开机自启动服务</span><br><span class="line">sudo systemctl start nexus.service #启动服务</span><br></pre></td></tr></table></figure>

<hr>
<p>由于自己是在虚拟机上安装的，本机访问没有问题，但其他主机访问不到服务，故还需做如下配置：<br><a href="https://www.cnblogs.com/mkl34367803/p/10095055.html">如何让局域网中的其他主机访问虚拟机</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Nexus</tag>
        <tag>npm私服</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Vite构建Vue3组件库</title>
    <url>/2023/01/11/%E4%BD%BF%E7%94%A8Vite%E6%9E%84%E5%BB%BAVue3%E7%BB%84%E4%BB%B6%E5%BA%93/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>当我们使用Angular开发库项目时，直接通过<code>ng g lib [name]</code>在当前工作空间中创建一个新的通用库项目即可，Angular会帮我们把依赖、配置甚至打包命令都设置好，还是相当方便的。</p>
<p>但当我们使用Vite + Vue3开发库项目时，该如何做呢？通过查Vite官方文档<a href="https://cn.vitejs.dev/guide/build.html#library-mode">库模式</a>发现，其介绍过于简单，因此这里做一个整理分享。</p>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="一、初始化工程"><a href="#一、初始化工程" class="headerlink" title="一、初始化工程"></a>一、初始化工程</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init vite@latest test1 --template vue-ts</span><br><span class="line">npm i --save-dev path  // 后面vite.config.ts中会用到</span><br></pre></td></tr></table></figure>

<h4 id="二、开发组件"><a href="#二、开发组件" class="headerlink" title="二、开发组件"></a>二、开发组件</h4><p>首先添加<code>packages\Button\src\MzButton.vue</code>文件用于编写组件，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line"></span><br><span class="line">defineProps&lt;&#123; msg: string &#125;&gt;()</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;mz-button&quot;&gt;这是一个按钮：&#123;&#123; msg &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.mz-button &#123;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  border: solid 1px #5d5d5d;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>再添加<code>packages\Button\index.js</code>文件用于导出该组件，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import MzButton from &#x27;./src/MzButton.vue&#x27;;</span><br><span class="line"></span><br><span class="line">MzButton.install = (App) =&gt; &#123;</span><br><span class="line">  App.component(MzButton.__name, MzButton);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default MzButton;</span><br></pre></td></tr></table></figure>

<p>再添加<code>packages\index.js</code>文件，用于导出所有的组件（这里其实只有一个组件，多组件只要在此基础上扩展即可），内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import MzButton from &#x27;./Button&#x27;;</span><br><span class="line"></span><br><span class="line">// 按需导入</span><br><span class="line">export &#123; MzButton &#125;;</span><br><span class="line"></span><br><span class="line">const components = [MzButton];</span><br><span class="line"></span><br><span class="line">const install = (App) =&gt; &#123;</span><br><span class="line">  components.forEach(item =&gt; &#123;</span><br><span class="line">    App.component(item.__name, item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  install</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="三、配置vite-config-ts文件"><a href="#三、配置vite-config-ts文件" class="headerlink" title="三、配置vite.config.ts文件"></a>三、配置vite.config.ts文件</h4><p>修改<code>vite.config.js</code>文件，对其进行配置修改成库打包的模式，这里输出内容到<code>lib</code>文件夹中，打包入口文件设置为<code>./packages/index.js</code>文件，最终配置如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; defineConfig &#125; from &#x27;vite&#x27;</span><br><span class="line">import vue from &#x27;@vitejs/plugin-vue&#x27;</span><br><span class="line">import &#123; resolve &#125; from &#x27;path&#x27;</span><br><span class="line"></span><br><span class="line">// https://vitejs.dev/config/</span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">  plugins: [vue()],</span><br><span class="line">  build: &#123;</span><br><span class="line">    outDir: &#x27;lib&#x27;,</span><br><span class="line">    lib: &#123;</span><br><span class="line">      entry: resolve(__dirname, &#x27;packages/index.js&#x27;),</span><br><span class="line">      name: &#x27;MzTest&#x27;,</span><br><span class="line">      // the proper extensions will be added</span><br><span class="line">      fileName: &#x27;mz-test&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    rollupOptions: &#123;</span><br><span class="line">      // 确保外部化处理那些你不想打包进库的依赖</span><br><span class="line">      external: [&#x27;vue&#x27;],</span><br><span class="line">      output: &#123;</span><br><span class="line">        // 在 UMD 构建模式下为这些外部化的依赖提供一个全局变量</span><br><span class="line">        globals: &#123;</span><br><span class="line">          vue: &#x27;Vue&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="四、打包输出lib库"><a href="#四、打包输出lib库" class="headerlink" title="四、打包输出lib库"></a>四、打包输出lib库</h4><p>执行<code>npm run build</code>，根据上面的配置文件会在根目录生成一个lib文件夹，里面包含了UMD、ESM规范打包的几个js库文件，还有css样式文件，整个组件库文件最终都会输出在lib文件夹下。</p>
<h4 id="五、准备package-json"><a href="#五、准备package-json" class="headerlink" title="五、准备package.json"></a>五、准备package.json</h4><p>配置package.json，内容如下（需要删除注释）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;mz-test&quot;,</span><br><span class="line">  &quot;private&quot;: false,  // 公开可下载</span><br><span class="line">  &quot;version&quot;: &quot;0.0.1&quot;,</span><br><span class="line">  &quot;keywords&quot;: [],  // 在npm上可被搜索的关键字</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;vite&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;vue-tsc --noEmit &amp;&amp; vite build&quot;,</span><br><span class="line">    &quot;preview&quot;: &quot;vite preview&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;files&quot;: [&quot;lib&quot;],</span><br><span class="line">  &quot;main&quot;: &quot;lib/mz-test.umd.js&quot;,  // 包函数入口文件</span><br><span class="line">  &quot;module&quot;: &quot;lib/mz-test.js&quot;,    // ESM标准入口</span><br><span class="line">  &quot;exports&quot;: &#123;</span><br><span class="line">    &quot;./lib/style.css&quot;: &quot;./lib/style.css&quot;,</span><br><span class="line">    &quot;.&quot;: &#123;</span><br><span class="line">      &quot;import&quot;: &quot;./lib/mz-test.js&quot;,</span><br><span class="line">      &quot;require&quot;: &quot;./lib/mz-test.umd.js&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,  // 向外暴露的文件 node规范</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;vue&quot;: &quot;^3.2.37&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;@vitejs/plugin-vue&quot;: &quot;^3.1.0&quot;,</span><br><span class="line">    &quot;vite&quot;: &quot;^3.1.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在根目录添加一个<code>.npmignore</code>文件，其作用是忽略不需要上传的文件内容，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Logs</span><br><span class="line">logs</span><br><span class="line">*.log</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line">pnpm-debug.log*</span><br><span class="line">lerna-debug.log*</span><br><span class="line"></span><br><span class="line">node_modules</span><br><span class="line">dist</span><br><span class="line">dist-ssr</span><br><span class="line">*.local</span><br><span class="line"></span><br><span class="line"># Editor directories and files</span><br><span class="line">.vscode/*</span><br><span class="line">!.vscode/extensions.json</span><br><span class="line">.idea</span><br><span class="line">.DS_Store</span><br><span class="line">*.suo</span><br><span class="line">*.ntvs*</span><br><span class="line">*.njsproj</span><br><span class="line">*.sln</span><br><span class="line">*.sw?</span><br><span class="line"></span><br><span class="line">packages/</span><br><span class="line">public/</span><br><span class="line">src/</span><br><span class="line">.gitignore</span><br><span class="line">.npmignore</span><br><span class="line">*.html</span><br><span class="line">package-lock.json</span><br><span class="line">tsconfig.json</span><br><span class="line">tsconfig.node.json</span><br><span class="line">vite.config.ts</span><br></pre></td></tr></table></figure>

<p>至此就可以将lib库上传至npm了。</p>
<p>如果想要本地打包，则直接<code>npm pack</code>即可，这样就会在根目录下生成一个<code>mz-test-0.0.1.tgz</code>。</p>
<h3 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h3><h4 id="一、安装组件"><a href="#一、安装组件" class="headerlink" title="一、安装组件"></a>一、安装组件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i mz-test 或 npm i file:mz-test-0.0.1.tgz</span><br></pre></td></tr></table></figure>

<h4 id="二、全局使用方法"><a href="#二、全局使用方法" class="headerlink" title="二、全局使用方法"></a>二、全局使用方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// main.ts</span><br><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#x27;./style.css&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">import MzTest from &#x27;mz-test&#x27;;  // 在ts文件中会报错，在vite-env.d.ts中添加declare module &#x27;mz-test&#x27;即可</span><br><span class="line">import &#x27;mz-test/lib/style.css&#x27;;</span><br><span class="line"></span><br><span class="line">createApp(App).use(MzTest).mount(&#x27;#app&#x27;)</span><br><span class="line"></span><br><span class="line">// 组件中</span><br><span class="line">&lt;mz-button&gt;&lt;/mz-button&gt; 或 &lt;MzButton&gt;&lt;/MzButton&gt;</span><br></pre></td></tr></table></figure>

<h4 id="三、局部使用方法"><a href="#三、局部使用方法" class="headerlink" title="三、局部使用方法"></a>三、局部使用方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// main.ts</span><br><span class="line">import &#x27;mz-test/lib/style.css&#x27;;</span><br><span class="line"></span><br><span class="line">// 组件中</span><br><span class="line">import &#123; MzButton &#125; from &#x27;mz-test&#x27;</span><br><span class="line"></span><br><span class="line">&lt;mz-button&gt;&lt;/mz-button&gt; 或 &lt;MzButton&gt;&lt;/MzButton&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vite</tag>
        <tag>Vue3组件库</tag>
      </tags>
  </entry>
  <entry>
    <title>使用nrm管理切换多个npm registry地址</title>
    <url>/2023/03/15/%E4%BD%BF%E7%94%A8nrm%E7%AE%A1%E7%90%86%E5%88%87%E6%8D%A2%E5%A4%9A%E4%B8%AAnpm-registry%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大家在工作时可能需要连接公司的私服下载前端依赖，这个时候会把npm的地址设置为公司的私服，但是这样的话自己开发自己的项目所需要的依赖在公司私服上找不到，因此又得重新设置npm下载的地址，因此在这推荐一个插件能够很方便的切换公司私服地址和淘宝镜像地址。</p>
<h2 id="一、nrm"><a href="#一、nrm" class="headerlink" title="一、nrm"></a>一、nrm</h2><p>nrm（npm registry manager）是npm的镜像管理工具，用来切换npm下载镜像源</p>
<h2 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h2><h3 id="1、安装nrm"><a href="#1、安装nrm" class="headerlink" title="1、安装nrm"></a>1、安装nrm</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g nrm</span><br></pre></td></tr></table></figure>
<p>安装之后，可通过<code>nrm ls</code>查看默认提供的镜像源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm ---------- https://registry.npmjs.org/</span><br><span class="line">yarn --------- https://registry.yarnpkg.com/</span><br><span class="line">tencent ------ https://mirrors.cloud.tencent.com/npm/</span><br><span class="line">cnpm --------- https://r.cnpmjs.org/</span><br><span class="line">taobao ------- https://registry.npmmirror.com/</span><br><span class="line">npmMirror ---- https://skimdb.npmjs.com/registry/</span><br></pre></td></tr></table></figure>

<h3 id="2、添加registry"><a href="#2、添加registry" class="headerlink" title="2、添加registry"></a>2、添加registry</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nrm add topsec http://10.63.78.76/repository/npm-group/</span><br><span class="line">// topsec 为自定义名称</span><br><span class="line">// 成功将会提示：add registry topsec success</span><br></pre></td></tr></table></figure>

<h3 id="3、切换registry"><a href="#3、切换registry" class="headerlink" title="3、切换registry"></a>3、切换registry</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nrm use topsec</span><br><span class="line">// 成功将会提示：Registry has been set to: http://10.63.78.76/repository/npm-group/</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>nrm</tag>
        <tag>npm源管理</tag>
      </tags>
  </entry>
  <entry>
    <title>使用nvm管理切换多个node版本</title>
    <url>/2023/03/10/%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86%E5%88%87%E6%8D%A2%E5%A4%9A%E4%B8%AAnode%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="1、Node版本管理工具"><a href="#1、Node版本管理工具" class="headerlink" title="1、Node版本管理工具"></a>1、Node版本管理工具</h2><p>node版本管理工具其实有很多，常见的的有nvm、n、fnm。之前一直使用n来管理node版本的，但是忽然有一天发现，安装n之前是需要先安装node的，而先安装的这一版本的node，不在n的管理范畴中，基于这两点原因，放弃了n的使用，转向了nvm。<br>本文主要记录下nvm的安装步骤和常用命令。</p>
<h2 id="2、nvm的安装"><a href="#2、nvm的安装" class="headerlink" title="2、nvm的安装"></a>2、nvm的安装</h2><p>网上关于nvm安装的文章也挺多的，大多都是让你执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash</span><br></pre></td></tr></table></figure>
<p>包括<a href="https://github.com/nvm-sh/nvm">Github</a>上也是这么写的，但一般由于网络原因，都是不能成功的，即便我开了科学上网，也没能成功。<br><strong>所以建议：</strong><br>直接从上述Github仓的<a href="https://github.com/nvm-sh/nvm/tags">Tags</a>里，下载最新版本的zip包，解压之后，运行包里的<code>install.sh</code>即可。<br>然后将如下代码粘贴到你的<code>～/.base_profile</code>文件中，保证nvm命令能够正常使用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export NVM_DIR=&quot;$([ -z &quot;$&#123;XDG_CONFIG_HOME-&#125;&quot; ] &amp;&amp; printf %s &quot;$&#123;HOME&#125;/.nvm&quot; || printf %s &quot;$&#123;XDG_CONFIG_HOME&#125;/nvm&quot;)&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</span><br></pre></td></tr></table></figure>

<h2 id="3、nvm常用命令"><a href="#3、nvm常用命令" class="headerlink" title="3、nvm常用命令"></a>3、nvm常用命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm ls                #列出已安装的node版本</span><br><span class="line">nvm ls-remote         #列出所有可用的node版本</span><br><span class="line">nvm use &lt;version&gt;     #使用指定版本的node</span><br><span class="line">nvm install &lt;version&gt; #安装指定版本的node</span><br><span class="line">nvm current           #显示当前正在使用的node版本</span><br><span class="line">nvm cache clear       #清空nvm缓存</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>nvm</tag>
        <tag>Node版本管理</tag>
      </tags>
  </entry>
  <entry>
    <title>关于commitlint和husky的安装和使用</title>
    <url>/2023/01/11/%E5%85%B3%E4%BA%8Ecommitlint%E5%92%8Chusky%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>现在大部分公司和项目用的代码管理工具基本都是git，在一个大的项目组中，会涉及很多的开发人员，这就会面临着频繁的提交代码。规范的提交代码规则会有利于问题的查找和回归，所以提交规范变得尤其的重要。下面我会为大家介绍一下，关于git的代码提交规则的约束工具：commitlint和husky。</p>
<span id="more"></span>

<h2 id="一、commitlint-链接"><a href="#一、commitlint-链接" class="headerlink" title="一、commitlint 链接"></a>一、commitlint <a href="https://commitlint.js.org/">链接</a></h2><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><p><code>npm i -D @commitlint/cli @commitlint/config-conventional</code></p>
<h3 id="2、生成commitlint配置文件"><a href="#2、生成commitlint配置文件" class="headerlink" title="2、生成commitlint配置文件"></a>2、生成commitlint配置文件</h3><p>项目根目录下执行：</p>
<p><code>echo &quot;module.exports = &#123;extends: [&#39;@commitlint/config-conventional&#39;]&#125;&quot; &gt; commitlint.config.js</code></p>
<p>可以在这个文件里设置自定义的git提交message的规则。</p>
<h3 id="3、常用的commit-message的类型"><a href="#3、常用的commit-message的类型" class="headerlink" title="3、常用的commit message的类型"></a>3、常用的commit message的类型</h3><p><code>feat</code> - A new feature.<br><code>fix</code> - A bug fix.<br><code>docs</code> - Documentation only changes.<br><code>style</code> - Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc).<br><code>refactor</code> - A Code change that neither fixes a bug nor adds a feature.<br><code>pref</code> - A code change that improves performance.<br><code>test</code> - Adding missing tests or correcting existing tests.<br><code>build</code> - Changes that effect the build system or external dependencies (example scopes: glup, broccoli, npm).<br><code>ci</code> - Changes to our CI configuration files and scripts (example scopes: Travis, Circle, , BrowserStack, SauceLabs).<br><code>chore</code> - Other changes that don’t modify sc or test files.<br><code>revert</code> - Reverts a previous commit.</p>
<h2 id="二、husky-链接"><a href="#二、husky-链接" class="headerlink" title="二、husky 链接"></a>二、husky <a href="https://typicode.github.io/husky">链接</a></h2><p>husky可以让我们向项目中方便添加git hooks。</p>
<h3 id="1、安装-1"><a href="#1、安装-1" class="headerlink" title="1、安装"></a>1、安装</h3><p><code>npm i -D husky</code></p>
<h3 id="2、编辑package-json-prepare-脚本并运行"><a href="#2、编辑package-json-prepare-脚本并运行" class="headerlink" title="2、编辑package.json &gt; prepare 脚本并运行"></a>2、编辑package.json &gt; prepare 脚本并运行</h3><p><code>npm pkg set scripts.prepare=&quot;husky install&quot;</code><br><code>npm run prepare</code></p>
<p>此时会在项目根目录下创建一个.husky目录<br>后续，当别人clone了你的仓(意味着项目根目录下有.git目录)，并执行npm install(无参数)时，husky install命令会自动执行</p>
<h3 id="3、添加一个钩子"><a href="#3、添加一个钩子" class="headerlink" title="3、添加一个钩子"></a>3、添加一个钩子</h3><p><code>npx husky add .husky/commit-msg &#39;npx --no-install commitlint --edit &quot;$1&quot;&#39;</code></p>
<p>此时会在.husky目录下创建一个commit-msg文件</p>
<h3 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h3><p><code>git commit -m &quot;新增了一个xxx功能&quot;</code><em>这样的commit message将会直接报错</em><br><code>git commit -m &quot;feat(scope?): 新增了一个xxx功能&quot;</code><em>这样规范的commit message是被允许的</em></p>
<h2 id="三、根据commit-message自动生成changelog"><a href="#三、根据commit-message自动生成changelog" class="headerlink" title="三、根据commit message自动生成changelog"></a>三、根据commit message自动生成changelog</h2><h3 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h3><p><code>npm i -D conventional-changelog conventional-changelog-cli</code></p>
<h3 id="2、编辑package-json-changelog-脚本"><a href="#2、编辑package-json-changelog-脚本" class="headerlink" title="2、编辑package.json &gt; changelog 脚本"></a>2、编辑package.json &gt; changelog 脚本</h3><p><code>npm pkg set scripts.changelog=&quot;conventional-changelog -p angular -i CHANGELOG.md -s&quot;</code></p>
<p>各参数含义：<br><code>-p</code> Name of the preset you want to use. Must be one of the following: angular, atom, codemirror, ember, eslint, express, jquery, jscs or jshint<br><code>-i</code> Read the CHANGELOG from this file<br><code>-s</code> Outputting to the infile so you don’t need to specify the same file as outfile<br><code>-r</code> How many releases to be generated from the latest. If 0, the whole changelog will be regenerated and the outfile will be overwritten. Default: 1</p>
<p>更详细的参数说明请查看<a href="https://zhuanlan.zhihu.com/p/392303778/">这里</a></p>
<h3 id="3、生成changelog"><a href="#3、生成changelog" class="headerlink" title="3、生成changelog"></a>3、生成changelog</h3><p>运行命令即可生成changelog</p>
<p><code>npm run changelog</code></p>
<hr>
<p>最后附上一个开源项目<a href="https://github.com/ng-docs/awesome-angular">https://github.com/ng-docs/awesome-angular</a>，关于husky的使用，即是从这里学到的。<br>另外，作者还用到了<a href="https://blog.csdn.net/duansamve/article/details/122644111">prestart、prebuild</a>钩子，实现了启动、打包项目之前的一些校验工作。<br>还有，作者还通过nodejs实现了获取文件git提交历史等的相关信息。<br>后续如果有需要，可以参考。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git hooks</tag>
        <tag>commitlint</tag>
        <tag>husky</tag>
      </tags>
  </entry>
  <entry>
    <title>前端自动部署脚本</title>
    <url>/2024/01/03/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>当一套前端代码需要根据配置打包成不同版本且部署到不同环境时，如果还是手动完成这些事情，这无疑是非常浪费时间的。这个时候自动打包、自动部署脚本就应运而生了。</p>
<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>NodeJS、Angular13</p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>一套前端代码，打包时可以选择企业版、企业版深色、社区版、社区版深色等版本，部署时可以选择01、02、03、04等环境</p>
<h2 id="自动打包"><a href="#自动打包" class="headerlink" title="自动打包"></a>自动打包</h2><p>对于 当执行打包、部署命令时 提示版本选择、环境选择这一功能，可以使用Linux脚本实现，也可以使用<a href="https://github.com/SBoudrias/Inquirer.js">inquirer</a>实现。但由于inquirer是基于node，意味着选择版本之后也需要使用nodejs代码启动打包命令<code>ng build</code>，虽然能够通过<code>child_process</code>（具体可参考<a href="https://gitee.com/legend-of-dongge/deploy/blob/master/index.js">这里</a>）实现，但经过测试，不能输出打包日志，所以放弃了这种方案，改用Linux脚本实现。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">PS3=<span class="string">&quot;请选择版本: &quot;</span>    </span><br><span class="line">options=(<span class="string">&quot;Enterprise&quot;</span> <span class="string">&quot;Enterprise-Dark&quot;</span> <span class="string">&quot;Community&quot;</span> <span class="string">&quot;Community-Dark&quot;</span>)    </span><br><span class="line">    </span><br><span class="line">selected=<span class="string">&quot;&quot;</span>  <span class="comment"># 初始化selected变量  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">select</span> opt <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;options[@]&#125;</span>&quot;</span>; <span class="keyword">do</span>    </span><br><span class="line">    selected=<span class="string">&quot;<span class="variable">$opt</span>&quot;</span>  <span class="comment"># 将选中的项赋值给selected变量  </span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$opt</span> <span class="keyword">in</span>    </span><br><span class="line">        <span class="string">&quot;Enterprise&quot;</span>)    </span><br><span class="line">            <span class="comment"># echo &quot;你选择了Enterprise&quot;    </span></span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">            ;;    </span><br><span class="line">        <span class="string">&quot;Enterprise-Dark&quot;</span>)    </span><br><span class="line">            <span class="comment"># echo &quot;你选择了Enterprise-Dark&quot;    </span></span><br><span class="line">            <span class="built_in">break</span>    </span><br><span class="line">            ;;    </span><br><span class="line">        <span class="string">&quot;Community&quot;</span>)    </span><br><span class="line">            <span class="comment"># echo &quot;你选择了Community&quot;    </span></span><br><span class="line">            <span class="built_in">break</span>    </span><br><span class="line">            ;;    </span><br><span class="line">        <span class="string">&quot;Community-Dark&quot;</span>)    </span><br><span class="line">            <span class="comment"># echo &quot;你选择了Community-Dark&quot;    </span></span><br><span class="line">            <span class="built_in">break</span>    </span><br><span class="line">            ;;    </span><br><span class="line">        *) <span class="built_in">echo</span> <span class="string">&quot;无效的选项&quot;</span>;;    </span><br><span class="line">    <span class="keyword">esac</span>    </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你选择的版本是: <span class="variable">$selected</span>&quot;</span>  <span class="comment"># 打印出selected变量的值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf ./dist/ui.zip ./dist/admin.zip</span><br><span class="line"><span class="comment"># 先打包后台管理界面</span></span><br><span class="line">ng build admin --base-href=/admin/ --configuration=<span class="variable">$selected</span></span><br><span class="line"><span class="comment"># 再打包前端界面</span></span><br><span class="line">ng build --configuration=<span class="variable">$selected</span></span><br><span class="line"><span class="built_in">cd</span> dist</span><br><span class="line"><span class="comment"># 将后台管理界面拷贝到前端界面目录下(服务器通过Nginx代理到不同界面)</span></span><br><span class="line"><span class="built_in">mv</span> admin ui/</span><br><span class="line">zip -qr ui.zip ui/</span><br></pre></td></tr></table></figure>

<p>对于Angular工程，我们可以通过在<code>environments/environment.ts</code>中自定义变量的方式控制不同的版本，形如这样：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> environment = &#123;</span><br><span class="line">  <span class="attr">production</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">versionType</span>: <span class="string">&#x27;Enterprise-Dark&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>但是在打包时如何更改<code>versionType</code>的值呢？是不是可以这样<code>ng build --env.versionType=xxx</code>？很遗憾，Angular CLI并不支持这样，<code>ng build</code>的参数是不能自定义的。虽然这样，我们仍然可以通过如下两种方式达到目的：</p>
<ul>
<li>在<code>ng build</code>之前<a href="https://www.null123.com/question/detail-2858797.html">通过nodejs读写文件的方式</a>更改<code>environments/environment.prod.ts</code>中<code>versionType</code>的值</li>
<li>通过配置<code>angular.json</code>中的<code>configurations</code>，然后指定<code>ng build --configuration=xxx</code>来控制打包时使用哪个配置信息即可，形如这样：<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Enterprise&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fileReplacements&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;replace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/environments/environment.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;with&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/environments/environment.enterprise.ts&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outputHashing&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Enterprise-Dark&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fileReplacements&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;replace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/environments/environment.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;with&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/environments/environment.enterprise-dark.ts&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outputHashing&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Community&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fileReplacements&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;replace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/environments/environment.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;with&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/environments/environment.community.ts&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outputHashing&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Community-Dark&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fileReplacements&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;replace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/environments/environment.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;with&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/environments/environment.community-dark.ts&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outputHashing&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h2><p>自动部署也是有两种方案：<code>sshpass</code>和<code>node-ssh</code>。</p>
<ul>
<li><h3 id="sshpass"><a href="#sshpass" class="headerlink" title="sshpass"></a>sshpass</h3></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">server=<span class="string">&quot;&quot;</span></span><br><span class="line">username=<span class="string">&quot;&quot;</span></span><br><span class="line">password=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">sshpass -p <span class="variable">$password</span> scp ./dist/ui.zip <span class="variable">$username</span>@<span class="variable">$server</span>:/data/app/</span><br><span class="line">sshpass -p <span class="variable">$password</span> ssh <span class="variable">$username</span>@<span class="variable">$server</span> <span class="string">&#x27;cd /data/app/; sh ui_update.sh&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这种方案在基于Intel芯片的Mac上测试成功了，但是在搭载Apple芯片的Mac上执行不成功，暂时不知道什么原因。</p>
<ul>
<li><h3 id="node-ssh"><a href="#node-ssh" class="headerlink" title="node-ssh"></a>node-ssh</h3></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)<span class="comment">//引入模块</span></span><br><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">&#x27;inquirer&#x27;</span>)<span class="comment">// 询问消息npm install --save inquirer@^8.0.0</span></span><br><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">&#x27;ora&#x27;</span>)<span class="comment">// 加载动画ora6.0以上版本不支持require方式引入，如果在node中使用，需要使用5.0版本</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">NodeSSH</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;node-ssh&#x27;</span>)<span class="comment">//链接ssh模块</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;./util&#x27;</span>)<span class="comment">//引入样式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ssh = <span class="keyword">new</span> <span class="title class_">NodeSSH</span>()<span class="comment">//创建实例ssh</span></span><br><span class="line"><span class="keyword">var</span> configGlobal<span class="comment">// 声明环境对象在选择部署环境时赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接到服务器</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">connectServer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> spinner = <span class="title function_">ora</span>(<span class="string">&#x27;登录服务器中...\n&#x27;</span>)</span><br><span class="line">  spinner.<span class="title function_">start</span>()</span><br><span class="line">  ssh.<span class="title function_">connect</span>(configGlobal.<span class="property">config</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      spinner.<span class="title function_">stop</span>()</span><br><span class="line">      util.<span class="title function_">green</span>(<span class="string">&#x27;SSH登录成功&#x27;</span>)</span><br><span class="line">      <span class="title function_">mvRemoteFile</span>()</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      spinner.<span class="title function_">stop</span>()</span><br><span class="line">      util.<span class="title function_">red</span>(<span class="string">&#x27;SSH登录失败:\n&#x27;</span>, err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 备份远程文件</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">mvRemoteFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> ssh.<span class="title function_">execCommand</span>(</span><br><span class="line">    <span class="string">`mv ui.zip ui_<span class="subst">$&#123;util.nowDate()&#125;</span>.zip`</span>,</span><br><span class="line">    &#123; <span class="attr">cwd</span>: configGlobal.<span class="property">remoteFileRoot</span> &#125;</span><br><span class="line">  ).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    util.<span class="title function_">green</span>(<span class="string">&#x27;远程文件 ui.zip 备份成功&#x27;</span>)</span><br><span class="line">    <span class="title function_">rmRemoteFile</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除远程文件ui.zip</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">rmRemoteFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> ssh.<span class="title function_">execCommand</span>(</span><br><span class="line">    <span class="string">`rm -rf ui`</span>,</span><br><span class="line">    &#123; <span class="attr">cwd</span>: configGlobal.<span class="property">remoteFileRoot</span> &#125;</span><br><span class="line">  ).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    util.<span class="title function_">green</span>(<span class="string">&#x27;远程文件 ui 删除成功&#x27;</span>)</span><br><span class="line">    <span class="title function_">uploadFile</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传文件到服务器</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">uploadFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> spinner = <span class="title function_">ora</span>(<span class="string">&#x27;上传文件到服务器...\n&#x27;</span>)</span><br><span class="line">  spinner.<span class="title function_">start</span>()</span><br><span class="line">  <span class="keyword">await</span> ssh.<span class="title function_">putFile</span>(<span class="string">`<span class="subst">$&#123;path.join(process.cwd())&#125;</span>/dist/ui.zip`</span>, <span class="string">`<span class="subst">$&#123;configGlobal.remoteFileRoot&#125;</span>ui.zip`</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      spinner.<span class="title function_">stop</span>()</span><br><span class="line">      util.<span class="title function_">green</span>(<span class="string">&#x27;本地文件 ui.zip 上传成功&#x27;</span>)</span><br><span class="line">      <span class="title function_">unzipRemoteFile</span>()</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      spinner.<span class="title function_">stop</span>()</span><br><span class="line">      util.<span class="title function_">red</span>(<span class="string">&#x27;本地文件 ui.zip 上传失败:\n&#x27;</span>, err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解压远程文件ui.zip</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">unzipRemoteFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> ssh.<span class="title function_">execCommand</span>(</span><br><span class="line">    <span class="string">`unzip ui.zip`</span>,</span><br><span class="line">    &#123; <span class="attr">cwd</span>: configGlobal.<span class="property">remoteFileRoot</span> &#125;</span><br><span class="line">  ).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    util.<span class="title function_">green</span>(<span class="string">&#x27;远程文件 ui.zip 解压成功&#x27;</span>)</span><br><span class="line">    configGlobal.<span class="property">restart</span> ? <span class="title function_">execRemoteShell</span>() : <span class="title function_">end</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行远程命令</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">execRemoteShell</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> spinner = <span class="title function_">ora</span>(<span class="string">&#x27;服务重启中...\n&#x27;</span>)</span><br><span class="line">  spinner.<span class="title function_">start</span>()</span><br><span class="line">  <span class="keyword">await</span> ssh.<span class="title function_">execCommand</span>(</span><br><span class="line">    <span class="string">`sh restart.sh`</span>,</span><br><span class="line">    &#123; <span class="attr">cwd</span>: configGlobal.<span class="property">remoteFileRoot</span> &#125;</span><br><span class="line">  ).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    util.<span class="title function_">green</span>(<span class="string">&#x27;服务重启成功&#x27;</span>)</span><br><span class="line">    <span class="title function_">end</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">end</span>(<span class="params"></span>) &#123;</span><br><span class="line">  util.<span class="title function_">green</span>(<span class="string">&#x27;UI部署完成&#x27;</span>)</span><br><span class="line">  ssh.<span class="title function_">dispose</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> username = <span class="string">&#x27;&#x27;</span>, password = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> envSetting = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">envName</span>: <span class="string">&#x27;01环境&#x27;</span>,</span><br><span class="line">    <span class="attr">remoteFileRoot</span>: <span class="string">&#x27;/data/app/&#x27;</span>,</span><br><span class="line">    <span class="attr">config</span>: &#123;</span><br><span class="line">      <span class="attr">host</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">port</span>: <span class="number">22</span>,</span><br><span class="line">      <span class="attr">username</span>: username,</span><br><span class="line">      <span class="attr">password</span>: password</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">envName</span>: <span class="string">&#x27;02环境&#x27;</span>,</span><br><span class="line">    <span class="attr">remoteFileRoot</span>: <span class="string">&#x27;/data/app/&#x27;</span>,</span><br><span class="line">    <span class="attr">config</span>: &#123;</span><br><span class="line">      <span class="attr">host</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">port</span>: <span class="number">22</span>,</span><br><span class="line">      <span class="attr">username</span>: username,</span><br><span class="line">      <span class="attr">password</span>: password</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">envName</span>: <span class="string">&#x27;03环境&#x27;</span>,</span><br><span class="line">    <span class="attr">remoteFileRoot</span>: <span class="string">&#x27;/data/app/&#x27;</span>,</span><br><span class="line">    <span class="attr">config</span>: &#123;</span><br><span class="line">      <span class="attr">host</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">port</span>: <span class="number">22</span>,</span><br><span class="line">      <span class="attr">username</span>: username,</span><br><span class="line">      <span class="attr">password</span>: password</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">restart</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">envName</span>: <span class="string">&#x27;04环境&#x27;</span>,</span><br><span class="line">    <span class="attr">remoteFileRoot</span>: <span class="string">&#x27;/data/app/&#x27;</span>,</span><br><span class="line">    <span class="attr">config</span>: &#123;</span><br><span class="line">      <span class="attr">host</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">port</span>: <span class="number">22</span>,</span><br><span class="line">      <span class="attr">username</span>: username,</span><br><span class="line">      <span class="attr">password</span>: password</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">restart</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动  自执行函数</span></span><br><span class="line">(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> choices = envSetting.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.<span class="property">envName</span></span><br><span class="line">  &#125;)</span><br><span class="line">  inquirer.<span class="title function_">prompt</span>([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;请选择部署环境：&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;environment&#x27;</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="comment">// 前缀</span></span><br><span class="line">      <span class="attr">prefix</span>: <span class="string">&#x27;☆&#x27;</span>,</span><br><span class="line">      <span class="comment">// 后缀</span></span><br><span class="line">      <span class="attr">suffix</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      choices</span><br><span class="line">    &#125;</span><br><span class="line">  ]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    configGlobal = envSetting[choices.<span class="title function_">indexOf</span>(res.<span class="property">environment</span>)]</span><br><span class="line">    <span class="title function_">connectServer</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<p>.&#x2F;util.js代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">underLine</span> = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\u001b[21m<span class="subst">$&#123;value&#125;</span>\u001b[0m`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">gray</span> = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\u001b[30m<span class="subst">$&#123;value&#125;</span>\u001b[0m`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">red</span> = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\u001b[31m<span class="subst">$&#123;value&#125;</span>\u001b[0m`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">green</span> = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\u001b[32m<span class="subst">$&#123;value&#125;</span>\u001b[0m`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">yellow</span> = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\u001b[33m<span class="subst">$&#123;value&#125;</span>\u001b[0m`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">blue</span> = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\u001b[34m<span class="subst">$&#123;value&#125;</span>\u001b[0m`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">purple</span> = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\u001b[35m<span class="subst">$&#123;value&#125;</span>\u001b[0m`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">blueSky</span> = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\u001b[36m<span class="subst">$&#123;value&#125;</span>\u001b[0m`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">white</span> = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\u001b[37m<span class="subst">$&#123;value&#125;</span>\u001b[0m`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">nowDate</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">const</span> year = now.<span class="title function_">getFullYear</span>();</span><br><span class="line">  <span class="keyword">const</span> month = now.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> today = now.<span class="title function_">getDate</span>();</span><br><span class="line">  <span class="keyword">return</span> year + <span class="title function_">fillZero</span>(month) + <span class="title function_">fillZero</span>(today);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fillZero</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + str : <span class="string">&#x27;&#x27;</span> + str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>inquirer</tag>
        <tag>node-ssh</tag>
        <tag>sshpass</tag>
      </tags>
  </entry>
  <entry>
    <title>可视化技术选型</title>
    <url>/2022/07/16/%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="架构对比"><a href="#架构对比" class="headerlink" title="架构对比"></a>架构对比</h2><ul>
<li>BS 架构：Unity、WebGL、Threejs</li>
<li>CS 架构：Unity、UE4、Ventuz</li>
<li>因为 Ventuz 是国外收费引擎，因此下面内容不做对比。</li>
</ul>
<h2 id="效果对比"><a href="#效果对比" class="headerlink" title="效果对比"></a>效果对比</h2><ul>
<li>CS 架构优于 BS 架构。</li>
<li>CS 架构中，UE4 和 Unity 效果各有特色，UE4 写实效果优于 Unity，Unity 其他效果优于 UE4。</li>
<li>BS 架构：Unity 的 B 端效果要优于 WebGL 和 Threejs，WebGL 和 Threejs 效果基本差不多。</li>
</ul>
<h2 id="体量对比"><a href="#体量对比" class="headerlink" title="体量对比"></a>体量对比</h2><ul>
<li>UE4 体量是这几个技术中最大的，相对于 Unity，UE4 的安装包 10GB 左右，同时对开发设备要求也是最高的，相同的项目等级，UE4 项目的体量要大于 Unity。</li>
<li>BS 架构因为效果低于 CS 架构，因此体量相对较小。</li>
</ul>
<h2 id="开发对比"><a href="#开发对比" class="headerlink" title="开发对比"></a>开发对比</h2><ul>
<li>BS 架构中 WebGL 和 Threejs 因为没有成熟的渲染流程，开发工作量比较大，但是 Unity 的 WebGL 是基于 Unity 引擎渲染，有成熟的渲染流程，开发工作量比较小；举个例子，在场景中增加一个相机，WebGL 和 Threejs 需要手动敲代码增加一个相机，而 Unity 只需要拖一个相机组件到场景即可。前两者使用 JS 语言，后面的 Unity 使用 C# 语言，最后发布成 WebGL。</li>
<li>相比 WebGL 和 Threejs，Unity 开发 B 端，主要工作是场景设计以及开发部分，不需要关心模型导入等其他问题。</li>
<li>CS 架构中，UE4 使用 C++ 语言开发，Unity 使用 C# 语言开发，UE4 的 C++ 语言也是在原 C++ 语言上增加的反射机制，因此编译比较慢；C# 语言是面向对象语言，有反射机制，因此开发过程中编译比较快。</li>
<li>扩展性：Unity 要优于 UE4，毕竟 C# 语言是面向对象的语言，市面上 Unity 的插件是要多于 UE4 的插件。这个从腾讯选择 Unity 做自己产品就可以看出。</li>
</ul>
<h2 id="友好对比"><a href="#友好对比" class="headerlink" title="友好对比"></a>友好对比</h2><ul>
<li>这里不做 B 端的阐述，相对 C 端，B 端的友好度很低。</li>
<li>UE4 的界面给人一种比较乱的感觉，画面跳色太多；在编辑材质、模型等资源时，会重新打开一个窗口，造成多个窗口来回拖动，影响操作性。</li>
<li>Unity 的界面友好度要优于 UE4，Unity 的所有窗口都在同一个大窗口之下，一目了然的可以看到各个窗口的内容。</li>
</ul>
<h2 id="渲染对比"><a href="#渲染对比" class="headerlink" title="渲染对比"></a>渲染对比</h2><ul>
<li>因为 C 端效果要优于 B 端，因此不做 B 端阐述。</li>
<li>Unity 是实时渲染，当修改材质时，可以实时看到场景内物体上材质的改变。</li>
<li>但是 UE4 修改材质时，需要保存并编译后才能看到，编译过程耗费的时间也跟使用的设备配置有关。</li>
</ul>
<h2 id="平台对比"><a href="#平台对比" class="headerlink" title="平台对比"></a>平台对比</h2><ul>
<li>Unity 可以发布成 B 端、C 端、移动端等</li>
<li>UE4 可以发布成 C 端、移动端等</li>
</ul>
<h2 id="维护对比"><a href="#维护对比" class="headerlink" title="维护对比"></a>维护对比</h2><p>Unity 的项目维护成本要低于 UE4 的维护成本，这个维护成本是从人力、设备等多方面考虑，一个相同体量项目，UE4 技术比 Unity 技术要多 1~2 个人。</p>
<h2 id="发布对比"><a href="#发布对比" class="headerlink" title="发布对比"></a>发布对比</h2><p>以相同项目发布成 C 端为例，UE4 耗费的时间要高于 Unity，具体是多少要看项目大小。</p>
<h2 id="像素流技术"><a href="#像素流技术" class="headerlink" title="像素流技术"></a>像素流技术</h2><p>现在 UE4 和 Unity 都有像素流技术，像素流的原理是将服务器渲染的画面通过视频流的方式传递至客户端，客户端不做渲染工作。因为是视频流，所以对网络带宽是有要求的，当然务器成本就很高。</p>
]]></content>
      <categories>
        <category>可视化</category>
      </categories>
  </entry>
  <entry>
    <title>如何将透明度应用于CSS变量</title>
    <url>/2024/06/04/%E5%A6%82%E4%BD%95%E5%B0%86%E9%80%8F%E6%98%8E%E5%BA%A6%E5%BA%94%E7%94%A8%E4%BA%8ECSS%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p>当我们使用CSS变量开发页面主题时，难免遇到这样的场景，假设有一个主色<code>--primary-color: #2a8b92;</code>，在某些地方想使用透明度为0.5的主色、0.8的主色。。。这个时候该怎么办呢？在这之前，我只能定义多个主色变量：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--primary-color</span>: <span class="number">#2a8b92</span>;</span><br><span class="line">  <span class="attr">--primary-color-opacity-05</span>: <span class="built_in">rgba</span>(<span class="number">42</span>, <span class="number">139</span>, <span class="number">146</span>, <span class="number">0.5</span>);</span><br><span class="line">  <span class="attr">--primary-color-opacity-08</span>: <span class="built_in">rgba</span>(<span class="number">42</span>, <span class="number">139</span>, <span class="number">146</span>, <span class="number">0.8</span>);</span><br><span class="line">  <span class="attr">--primary-color-opacity-10</span>: <span class="built_in">rgba</span>(<span class="number">42</span>, <span class="number">139</span>, <span class="number">146</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样一来，需要维护的变量就太多了，好在CSS变量支持如下写法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--primary-color</span>: <span class="number">42</span>, <span class="number">139</span>, <span class="number">146</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用时只需这样即可：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="built_in">var</span>(--primary-color), <span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="built_in">var</span>(--primary-color), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但这样每次使用时都需要写rgb或rgba，略微麻烦，所以一般可以这样：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--primary-color-rgb</span>: <span class="number">42</span>, <span class="number">139</span>, <span class="number">146</span>;</span><br><span class="line">  <span class="attr">--primary-color-hex</span>: <span class="number">#2a8b92</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样当需要透明度时使用<code>--primary-color-rgb</code>，当不需要透明度时直接使用<code>--primary-color-hex</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="built_in">var</span>(--primary-color-rgb), <span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">var</span>(--primary-color-hex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS变量</tag>
      </tags>
  </entry>
  <entry>
    <title>富文本编辑器调研</title>
    <url>/2023/09/01/%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E8%B0%83%E7%A0%94/</url>
    <content><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/530986560">开源License介绍</a></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>介绍</th>
<th>是否开源</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><a target="_blank" href="https://www.tiny.cloud/">TinyMCE</a><br><a target="_blank" href="http://tinymce.ax-z.cn/">中文文档</a></td>
<td>TinyMCE是一个开源的所见即所得的HTML编辑器，界面相当清新，界面模拟本地软件的风格，顶部有菜单栏。支持图片在线处理，插件多，功能非常强大，易于集成，并且拥有可定制的主题。支持目前流行的各种浏览器，它可以达到微软Word类似的编辑体验。<br>而且这么好的东西还是开源免费的，目前一直有人维护，这款编辑器使用的人非常多。</td>
<td><a target="_blank" href="https://github.com/tinymce/tinymce">MIT license</a></td>
<td>英文文档<br>提供支持Angular的依赖包</td>
</tr>
<tr>
<td><a target="_blank" href="https://ckeditor.com/">CKEditor5</a></td>
<td>CKEditor也是一款非常经典的富文本编辑器，官方下载量过千万。它是在非常著名的FCKEditor基础上开发的新版本，FCKEditor的用户现在基本都转移到CKEditor了。<br>CKEditor有高性能的实时预览，它特有行内编辑功能，使得编辑内容更加直观，仿佛是在编辑网页一样，有很强的可扩展性，被各大网站广泛运用。</td>
<td><a target="_blank" href="https://github.com/ckeditor/ckeditor5/blob/master/LICENSE.md">GNU General Public License</a></td>
<td>英文文档<br>提供支持Angular的依赖包</td>
</tr>
<tr>
<td><a target="_blank" href="https://tiptap.dev/">Tiptap</a></td>
<td>Tiptap 编辑器是一个无头、与框架无关的富文本编辑器，可以通过扩展程序进行自定义和扩展。无头性质意味着 Tiptap 没有固定的用户界面，提供完全的设计自由。<br>目前有4种定价方式：免费版、入门版（149美元/月）、商业版（999美元/月）、企业版（Custom）</td>
<td><a target="_blank" href="https://github.com/ueberdosis/tiptap/blob/main/LICENSE.md">MIT License</a></td>
<td>英文文档</td>
</tr>
<tr>
<td><a target="_blank" href="http://www.wangeditor.com/">wangEditor</a></td>
<td>wangEditor轻量级，小巧实用，配置方便，使用简单。可以自定义皮肤功能，免费开源。用户数量也很多，尤其是用在一些轻型环境，比如论坛社区回帖。wangEditor是国人出品的开源项目。<br><span style="color: #EE1414">bug较多，这都是其官方示例中存在的bug：<br>1. 编辑器必须设置高度，无法实现类似腾讯文档纵向无限延伸的效果，如果不设置高度，则当内容只有一行时，hoverbar位置不对<br>2. 插入分隔线或表格或自定义元素时，总是会在前面空出一行，哪怕光标所在行没有任何内容<br>3. 在分割线上方插入表格，表格却跑到了分割线下方，两个互换了位置</span></td>
<td><a target="_blank" href="https://github.com/wangeditor-team/wangEditor">MIT license</a></td>
<td>中文文档</td>
</tr>
<tr>
<td><a target="_blank" href="https://cart.froala.com/">Froala Editor</a></td>
<td>Froala是一款功能丰富的富文本编辑器，界面分类清晰，容易集成，容易升级，支持主流浏览器，具有行内编辑功能。Froala代码示例很多，可以集成在很多js框架里如React.js，Aurelia，Angular，Ionic，Django等。插件很多，易于扩充功能。<br>Froala是收费的，不过前端是开源的，如果要使用后台是要交费的（如果你使用国人强大的crack技能那就是另外一回事了~ ~）。目前有三个定价方式：免费版、专业版（629美元/年）和企业版（1399美元/年）。</td>
<td><a target="_blank" href="https://github.com/froala/angular-froala-wysiwyg#license">License Detail</a><br>The <span style="background: #e4e4e4">angular-froala-wyswiyg</span> project is under MIT license. However, in order to use Froala WYSIWYG HTML Editor plugin you should purchase a license for it.</td>
<td>英文文档<br>提供支持Angular的依赖包</td>
</tr>
<tr>
<td><a target="_blank" href="https://quilljs.com/">Quill</a></td>
<td>Quill是轻型的编辑器，样式一般（黑白风），功能中等，它的代码高亮功能比较强，同样支持行内编辑模式，工具条可自定义。<br>开源免费，项目活跃，一直有人维护。</td>
<td><a target="_blank" href="https://github.com/quilljs/quill/blob/develop/LICENSE">BSD-3-Clause license</a></td>
<td>看Github代码是有在更新，但最新的Tag是2019年的。<br>官网文档太过简单。<span style="color: #EE1414">不太推荐</span></td>
</tr>
<tr>
<td><a target="_blank" href="http://mindmup.github.io/bootstrap-wysiwyg/">bootstrap-wysiwyg</a></td>
<td>bootstrap-wysiwyg是基于Bootstrap的轻型、免费开源的富文本编辑器，界面简洁大方。使用需要先引入Bootstrap。<br>个人觉得bootstrap-wysiwyg这一长串像乱码一样的名字影响了它的推广和使用~ ~毕竟轻型使用环境还是很多的。</td>
<td></td>
<td>依赖jQuery、Bootstrap，<span style="color: #EE1414">不推荐使用</span></td>
</tr>
<tr>
<td><a target="_blank" href="https://summernote.org/">Summernote</a></td>
<td>Summernote是一款轻量级的富文本编辑器，比较容易上手，使用体验流畅，支持各种主流浏览器。Summernote开源免费，该项目一直比较活跃，一直都有人在维护。</td>
<td></td>
<td>依赖jQuery、Bootstrap，<span style="color: #EE1414">不推荐使用</span></td>
</tr>
<tr>
<td><a target="_blank" href="https://dhtmlx.com/docs/products/dhtmlxRichText/">DHTMLX Rich Text Editor</a></td>
<td>DHTMLX组件是一整套基于JS的UI库，功能强大，其中包含编辑器dhtmlxEditor。该编辑器可以直接集成到Angular，React和Vue.js框架中，该编辑器还同时支持Markdown和富文本。<br>支持普通视图和类似word一样的页面视图，支持全屏幕，工具支持自定义，包括工具条颜色和样式等。</td>
<td><img width="200" alt="DHTMLX Rich Text Editor.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/富文本编辑器调研/DHTMLX Rich Text Editor.png"></td>
<td><span style="color: #EE1414">收费</span></td>
</tr>
<tr>
<td><a target="_blank" href="http://kindeditor.net/demo.php">KindEditor</a></td>
<td>KindEditor历史也很长了，用户数也不少，国内某公司出品。免费开源。界面类似于office word，界面和功能中规中矩，文档齐全，使用还算方便。</td>
<td></td>
<td>界面比较老气，应该是win xp时代的产物，<span style="color: #EE1414">不推荐使用</span></td>
</tr>
<tr>
<td><a target="_blank" href="http://freetextbox.com/">FreeTextBox</a></td>
<td>FreeTextBox功能强大，前端支持主流浏览器，但后台只支持.NET。它的外观和使用风格都和微软 Word很类似。工具条可以定制，运行速度一般。FreeTextBox分为免费版和pro收费版，一般情况免费版本功能已经足够用了。</td>
<td></td>
<td>界面比较老气，应该是win xp时代的产物，<span style="color: #EE1414">不推荐使用</span></td>
</tr>
<tr>
<td><a target="_blank" href="http://www.ewebeditor.net/demo/">eWebEditor</a></td>
<td>eWebEditor外观和使用风格都和微软 Word很类似，功能很多。工具条可以定制，运行速度很快。导入文件接口很多，支持word、excel、pdf、ppt直接导入，目前版本不支持代码高亮，不适合纯技术平台使用，适合内容编辑人员使用。<br>eWebEditor有很长的历史了，是典型的传统富文本编辑器，不论是界面，还是功能都比较传统。<br>eWebEditor是收费的，但也有免费的精简版，精简版没有后台功能。</td>
<td></td>
<td>界面比较老气，应该是win xp时代的产物，<span style="color: #EE1414">不推荐使用</span></td>
</tr>
<tr>
<td><a target="_blank" href="https://github.com/fex-team/ueditor">UEditor</a></td>
<td>UEditor 是由百度出品的富文本web编辑器，具有轻量，可定制，注重用户体验等特点，开源免费。这款编辑器用过的人也非常多，功能非常全面，插件很多，还可以很方便插入百度地图，接入十分简单。<br>16年之后百度没有怎么更新了，不过现有的功能也足够用了。UEditor分为UE版（全功能版）和UM版（精简版），大家可以根据自己使用环境选择不同的版本。</td>
<td></td>
<td>停更，<span style="color: #EE1414">不推荐使用</span></td>
</tr>
<tr>
<td><a target="_blank" href="https://simditor.tower.im/">Simditor</a></td>
<td>Simditor是Tower平台使用的富文本编辑器，是一款轻量化的编辑器，界面简约，功能实用，插件不是很多，功能要求不高的可以使用。<br>虽然是国内出品，但文档是英文的。开源免费。</td>
<td></td>
<td>停更（最新的Tag是2019年的），<span style="color: #EE1414">不推荐使用</span></td>
</tr>
</tbody>
</table>]]></content>
      <categories>
        <category>富文本编辑器</category>
      </categories>
      <tags>
        <tag>富文本编辑器</tag>
        <tag>License</tag>
      </tags>
  </entry>
  <entry>
    <title>yalc:最好用的前端link调试方案</title>
    <url>/2024/04/08/%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84%E5%89%8D%E7%AB%AFlink%E8%B0%83%E8%AF%95%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="一、什么是yalc"><a href="#一、什么是yalc" class="headerlink" title="一、什么是yalc"></a>一、什么是yalc</h2><p>对包开发者而言，一种比<code>yarn/npm link</code>更好的开发流程。<br>它的主要对标者就是<code>yarn/npm link</code>，它主要解决了一些<code>yarn/npm link</code>本身存在的缺陷，满足了包开发者的实际需求。</p>
<h2 id="二、yalc的安装"><a href="#二、yalc的安装" class="headerlink" title="二、yalc的安装"></a>二、yalc的安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i yalc -g</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line">yarn global add yalc</span><br></pre></td></tr></table></figure>
<h2 id="三、yalc的基本使用"><a href="#三、yalc的基本使用" class="headerlink" title="三、yalc的基本使用"></a>三、yalc的基本使用</h2><h3 id="1-yalc-publish-发布依赖"><a href="#1-yalc-publish-发布依赖" class="headerlink" title="1. yalc publish (发布依赖)"></a>1. yalc publish (发布依赖)</h3><p>在已经构建完成的包(比如good-ui)中执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yalc publish</span><br></pre></td></tr></table></figure>
<p>在<code>yalc publish</code>后，它会逐一执行npm生命周期脚本，如：<code>prepublish、prepare、prepublishOnly、prepack</code>…等。<br>同时，你也可以通过<code>--no-script</code>禁用钩子钩动各种脚本。</p>
<h3 id="2-yalc-add-添加依赖"><a href="#2-yalc-add-添加依赖" class="headerlink" title="2. yalc add (添加依赖)"></a>2. yalc add (添加依赖)</h3><p>在目标包(比如admin-management)中执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yalc add good-ui</span><br></pre></td></tr></table></figure>

<p>现在，你可以在项目中通过</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;good-ui&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>用到你本地good-ui中的最新代码了！<br>而且！<br>admin-management&#x2F;node_modules中原本依赖的good-ui文件也并没有丢，它们被放到了一个缓存文件中，你可以轻松还原，如下：</p>
<h3 id="3-yalc-remove-移除依赖"><a href="#3-yalc-remove-移除依赖" class="headerlink" title="3. yalc remove (移除依赖)"></a>3. yalc remove (移除依赖)</h3><p>在admin-management项目中执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yalc remove good-ui</span><br></pre></td></tr></table></figure>

<p>嘿！我又重新用上了node_modules中原本依赖的good-ui，而且快如闪电！太完美了！</p>
<h3 id="4-yalc-push-更新和推送"><a href="#4-yalc-push-更新和推送" class="headerlink" title="4. yalc push (更新和推送)"></a>4. yalc push (更新和推送)</h3><p>没有人能做到一次成功！<br>如果在你修改了good-ui里的一些代码，你只需要执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yalc publish --push</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">简化为：</span></span><br><span class="line">yalc push</span><br></pre></td></tr></table></figure>

<p>你的最新的包，直接在admin-management中生效了！<br>甚至能触发了HRM！</p>
<h2 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a>四、其他</h2><p>需要注意的是，yalc会把包发布到<code>~/.yalc/packages</code>中，如果必要的话，需要定时清理，以免占用过多磁盘空间。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>yalc</tag>
      </tags>
  </entry>
  <entry>
    <title>极空间Docker安装CentOS并开启SSH</title>
    <url>/2024/10/12/%E6%9E%81%E7%A9%BA%E9%97%B4Docker%E5%AE%89%E8%A3%85CentOS%E5%B9%B6%E5%BC%80%E5%90%AFSSH/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>购买极空间的目的，一方面是为了方便存储、共享照片、视频、音乐，尤其是宝宝照片，换下来的旧手机、iPad，照片都没有统一的存储位置。iCloud？空间不够。百度网盘？空间方面，应该是之前参加活动，达到了1T，还可以，但下载速度实在是太恶心。而且毕竟是托管到了第三方平台，虽然百度是一家大型互联网公司，但以后谁说得准呢，想当年诺基亚也是响当当的手机厂商，不一样折戟沉沙。</p>
<p>另一方面，利用极空间的Docker可以搭建一台专属服务器，平时搞个测试、部署个Web服务，实在是太方便了。之前尝试过在家里弄了台主机作为服务器，也购买过阿里云的服务器，但一方面不支持移动端、不方便共享，满足不了上面共享照片的需求，另一方面云服务器费用太高，最终都放弃了。</p>
<p>虽然极空间依赖他的App，但内容是存储到自己硬盘里的，即便将来他也成为了诺基亚，理论上只要已安装的App还在，就能使用。再退一步，还可以将硬盘取出来直连接到电脑获取内容。</p>
<h2 id="1-安装CentOS"><a href="#1-安装CentOS" class="headerlink" title="1. 安装CentOS"></a>1. 安装CentOS</h2><h3 id="1-1-下载镜像"><a href="#1-1-下载镜像" class="headerlink" title="1.1 下载镜像"></a>1.1 下载镜像</h3><p>直接在常用镜像里搜索CentOS下载即可。<br><img width="600" alt="下载镜像.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/极空间Docker安装CentOS并开启SSH/下载镜像.png"></p>
<h3 id="1-2-安装镜像"><a href="#1-2-安装镜像" class="headerlink" title="1.2 安装镜像"></a>1.2 安装镜像</h3><p>双击下载好的镜像，开始配置。<br>极空间的参数设置窗口分8个Tab。我们这里主要设置“基本设置”、“文件夹路径”、“端口”这三个Tab，其余页面保持默认就可以了。</p>
<p><strong>基本设置</strong><br>由于我的极空间是8核16G的，所以这里我就不启用性能限制了。<br><img width="600" alt="基本设置.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/极空间Docker安装CentOS并开启SSH/基本设置.png"></p>
<p><strong>文件夹路径</strong><br>这里可以这么理解：将CentOS的<code>/data</code>目录映射到极空间的<code>/SATA0/centos</code>目录，这样在CentOS里就可以通过<code>/data</code>目录访问到极空间<code>/SATA0/centos</code>目录下的内容。<br><img width="600" alt="文件夹路径.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/极空间Docker安装CentOS并开启SSH/文件夹路径.png"></p>
<p><strong>端口</strong><br>其实就是做一个端口映射，将极空间的某个端口映射到CentOS的某个端口。这里需要一次性尽量设置多一些，因为后面再编辑的话，它会初始化CentOS，导致之前安装的软件都丢失，不过放到<code>/data</code>(映射到极空间目录)的内容不会丢失。<br><img width="600" alt="端口.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/极空间Docker安装CentOS并开启SSH/端口.png"></p>
<h2 id="2-安装Linux常备组件"><a href="#2-安装Linux常备组件" class="headerlink" title="2. 安装Linux常备组件"></a>2. 安装Linux常备组件</h2><p>首先从极空间Docker官方SSH进入系统，进行设置。进入之后是默认root账户。<br><img width="500" alt="SSH登录.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/极空间Docker安装CentOS并开启SSH/SSH登录.png"></p>
<p><strong>安装镜像源和系统下载工具</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i -e &quot;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&quot; /etc/yum.repos.d/CentOS-* </span><br><span class="line"></span><br><span class="line">yum install -y wget</span><br></pre></td></tr></table></figure>

<p><strong>安装网络工具</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y openssh*</span><br><span class="line"></span><br><span class="line">yum install -y net-tools</span><br></pre></td></tr></table></figure>

<p><strong>安装密码工具</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y passwd</span><br></pre></td></tr></table></figure>

<p><strong>修改密码</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure>

<h2 id="3-开启SSH"><a href="#3-开启SSH" class="headerlink" title="3. 开启SSH"></a>3. 开启SSH</h2><p><strong>修改ssh设置</strong><br>首先对系统的ssh设置进行修改（ssh工具就是上文中安装的openssh）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<img width="400" alt="打开端口22的监听.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/极空间Docker安装CentOS并开启SSH/打开端口22的监听.png">

<p><strong>使能ssh</strong><br>在正常的使能方法里，直接使用Linux的systemctl工具就可以使能。但是，该工具是需要docker系统的privilege权限的，而且需要在开启docker的时候就赋予权限。而极空间既没有开放命令行操作，也没有开放privilege权限，所以我们也就无法使用命令行在docker开启的时候赋予privilege权限了。因此，我们必须使用其他的方法进行使能。<br>请按照下面方法进行配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /var/run/sshd</span><br><span class="line"></span><br><span class="line">ssh-keygen -q -t rsa -b 2048 -f /etc/ssh/ssh_host_rsa_key -N &#x27;&#x27; </span><br><span class="line"></span><br><span class="line">ssh-keygen -q -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">ssh-keygen -t dsa -f /etc/ssh/ssh_host_ed25519_key -N &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">/usr/sbin/sshd -D &amp; </span><br></pre></td></tr></table></figure>
<p>然后就可以开启ssh工具了。<br>如果需要确认是否已经开启，可以输入下述指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -antup | grep sshd</span><br></pre></td></tr></table></figure>
<p>应该会有以下输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      256/sshd</span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      256/sshd</span><br></pre></td></tr></table></figure>

<h2 id="4-使用SSH工具连接"><a href="#4-使用SSH工具连接" class="headerlink" title="4. 使用SSH工具连接"></a>4. 使用SSH工具连接</h2><p>现在就可以使用比如<code>Termius</code>等ssh工具进行连接了。</p>
<h2 id="5-配置ll命令"><a href="#5-配置ll命令" class="headerlink" title="5. 配置ll命令"></a>5. 配置<code>ll</code>命令</h2><p>在CentOS中，<code>ll</code>命令是<code>ls -l</code>的别名，但是默认情况下，CentOS并没有配置<code>ll</code>命令。因此，我们需要手动配置一下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>在文件末尾添加以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias ll=&#x27;ls -alF&#x27;</span><br></pre></td></tr></table></figure>
<p>然后保存并退出，使用以下命令使配置生效：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>极空间</category>
      </categories>
  </entry>
  <entry>
    <title>聚类分析使用场景</title>
    <url>/2023/07/12/%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<h3 id="一、数据集"><a href="#一、数据集" class="headerlink" title="一、数据集"></a>一、数据集</h3><ol>
<li>公司积累了一批员工应用的使用数据，要根据不同维度划分不同的员工群体。如经常访问招聘网站和网络邮件的员工可能会有离职倾向，这类群体需要重点关注。</li>
<li>该数据集中含有员工访问CRM、云盘、招聘等特征信息。<br><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/b6d269bf_358662.jpg" alt="图1"></li>
</ol>
<h3 id="二、数据预处理"><a href="#二、数据预处理" class="headerlink" title="二、数据预处理"></a>二、数据预处理</h3><ol>
<li>想通过CRM、云盘、招聘、网络邮件划分群体，选择这几个字段。</li>
<li>由于不同字段数值差别大，进行标准化处理。<br><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/2b50d461_358662.jpg" alt="图2"></li>
<li>处理后的数据如下<br><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/785de7b5_358662.jpg" alt="图3"></li>
</ol>
<h3 id="三、聚类"><a href="#三、聚类" class="headerlink" title="三、聚类"></a>三、聚类</h3><ol>
<li>选择聚类算法<br>这里默认选择k-means算法</li>
<li>选择聚类字段<br><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/163cfd8a_358662.jpg" alt="图4"></li>
<li>选择要分成几类<br><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/918b58bc_358662.jpg" alt="图5"></li>
</ol>
<h3 id="四、可视化展示"><a href="#四、可视化展示" class="headerlink" title="四、可视化展示"></a>四、可视化展示</h3><ol>
<li>选择纬度<br>选择2维</li>
<li>选择邮件为X轴，招聘网站为Y轴。<br>可以看到访问招聘网站较多的同时访问邮件也较多的人比较集中。也说明这使用这几个参数进行分类效果较好。<br><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/d7cd2271_358662.jpg" alt="图6"></li>
<li>选择CRM为X轴，云盘为Y轴。<br>可以看到比较分散，说明这两个分类效果较差。<br><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/%E8%81%9A%E7%B1%BB%E5%88%86%E6%9E%90%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/b273a638_358662.jpg" alt="图7"></li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>通过Gitee的OpenAPI实现图床</title>
    <url>/2024/09/27/%E9%80%9A%E8%BF%87Gitee%E7%9A%84OpenAPI%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<p>写博客、记笔记时，总会遇到图片上传的问题，如果使用本地图片，那么图片的存储和管理就会变得非常麻烦，所以需要一个图床来存储图片，方便管理和使用。</p>
<p>自己使用过两款图床 App，这里先说下使用感受。</p>
<h3 id="1-uPic"><a href="#1-uPic" class="headerlink" title="1. uPic"></a>1. uPic</h3><p>uPic 是一款非常优秀的图床 App，支持多种图床，包括七牛云、阿里云、腾讯云等，同时也支持自定义图床。uPic 的界面简洁，操作方便，上传速度也很快。但是，在我的<code>macOS Big Sur@11.7.10</code>上配置了 Gitee 图床后，上传图片没反应。我确认配置没有问题，因为同样的配置在 PicGo 上是可以正常上传的。<br><img width="250" alt="uPic.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/通过Gitee的OpenAPI实现图床/uPic.png"></p>
<h3 id="2-PicGo"><a href="#2-PicGo" class="headerlink" title="2. PicGo"></a>2. PicGo</h3><p>PicGo 同样也是一款优秀的开源图床工具，支持多种图床，包括七牛云、阿里云、腾讯云等，同时也支持自定义图床。但是为什么也不使用它呢？因为它的操作比较麻烦，每次上传图片都得打开主窗口，不能在菜单栏直接上传。虽然将图片拖拽到菜单栏上提示可以上传，但松开鼠标没有任何反应。<br><img width="250" alt="PicGo.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/通过Gitee的OpenAPI实现图床/PicGo.png"></p>
<p><img src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/%E9%80%9A%E8%BF%87Gitee%E7%9A%84OpenAPI%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A/PicGo%E6%8F%90%E7%A4%BA%E5%8F%AF%E4%B8%8A%E4%BC%A0.png" alt="PicGo提示可上传.png"></p>
<p>而且上述两款 App 都不支持对图片进行分类。而使用 Gitee 的 OpenAPI 实现图床，就可以通过目录对图片进行分类，方便管理和使用。</p>
<h3 id="3-通过-Gitee-的-OpenAPI-实现图床"><a href="#3-通过-Gitee-的-OpenAPI-实现图床" class="headerlink" title="3. 通过 Gitee 的 OpenAPI 实现图床"></a>3. 通过 Gitee 的 OpenAPI 实现图床</h3><p>Gitee 提供了 OpenAPI，可以用来实现图床功能。下面是使用 Gitee OpenAPI 实现图床的步骤：</p>
<ol>
<li>在 Gitee 上创建一个公开的仓库，用于存储图片。</li>
<li>获取 Gitee 的 Access Token，用于身份验证。<img width="600" alt="私人令牌.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/通过Gitee的OpenAPI实现图床/私人令牌.png"></li>
<li>使用 Gitee OpenAPI 上传图片到仓库中。<br>通过<code>新建文件</code> <code>https://gitee.com/api/v5/repos/&#123;owner&#125;/&#123;repo&#125;/contents/&#123;path&#125;</code> API，实现图片上传。</li>
<li>使用 Gitee OpenAPI 获取图片的 URL，用于在博客或笔记中使用。<br>通过<code>获取仓库具体路径下的内容</code> <code>https://gitee.com/api/v5/repos/&#123;owner&#125;/&#123;repo&#125;/contents(/&#123;path&#125;)</code> API 递归读取仓库目录，过滤出图片，并展示到界面。</li>
</ol>
<ul>
<li>支持直接点击名称复制 Markdown 格式的图片链接 <code>![图片名称](图片链接)</code>，也可以按住 Shift 键点击名称复制 img 标签格式的图片链接 <code>&lt;img width=&quot;500&quot; alt=&quot;图片名称&quot; src=&quot;图片链接&quot;&gt;</code>，也可以按住 Alt 键点击名称只复制图片链接。</li>
<li>支持剪贴板上传，将图片复制到剪贴板，直接 <code>ctrl + v</code> 即可将图片上传到 Gitee 仓库中。</li>
</ul>
<img width="600" alt="DoAutumn图床.png" src="https://gitee.com/doautumn/doautumn.gitee.io/raw/master/通过Gitee的OpenAPI实现图床/DoAutumn图床.png">]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
</search>
